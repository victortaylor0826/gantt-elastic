{"version":3,"file":"elastigantt.js","sources":["../src/components/Header.vue","../src/components/TaskList/Resizer.vue","../src/components/TaskList/Expander.vue","../src/components/TaskList/TaskListHeader.vue","../src/components/TaskList/ItemColumn.vue","../src/components/TaskList/TaskListItem.vue","../src/components/TaskList/TaskList.vue","../src/components/Grid/Grid.vue","../src/components/Calendar/CalendarRow.vue","../src/components/Calendar/Calendar.vue","../src/components/Tree/DependencyLines.vue","../src/components/Tree/Text.vue","../src/components/Tree/Info.vue","../src/components/Tree/ProgressBar.vue","../src/components/Tree/Row/Task.vue","../src/components/Tree/Row/Milestone.vue","../src/components/Tree/Row/Project.vue","../src/components/Tree/Tree.vue","../src/components/Main.vue","../src/Elastigantt.vue","../src/index.js"],"sourcesContent":["<template>\n<div class=\"elastigantt__header\">\r\n  <label>X scale:<input type=\"range\" v-model=\"scale\" max=\"24\" min=\"2\"></label>\r\n  <label>Y scale:<input type=\"range\" v-model=\"height\" max=\"100\" min=\"6\"></label>\r\n  <!--<input type=\"range\" v-model=\"scope\" max=\"100\" min=\"0\">-->\r\n  <label>Task list width:<input type=\"range\" v-model=\"divider\" max=\"100\" min=\"0\"></label>\r\n  <label><input type=\"checkbox\" v-model=\"root.state.taskList.display\">Display task list</label>\r\n  <!--<button class=\"elastigantt__btn-img\" @click=\"getImage\">Get image</button>-->\r\n  <button class=\"elastigantt__btn-recenter\" @click=\"recenterPosition\">Recenter</button>\r\n  {{root.state.scroll.tree.dateTime.left}} - {{root.state.scroll.tree.dateTime.right}}\r\n</div>\n</template>\r\n<script>\nexport default {\r\n  inject: ['root'],\r\n  data() {\r\n    return {};\r\n  },\r\n  methods: {\r\n    getImage() {\r\n      const code = this.root.getImage('image/png').then(imgB64 => {\r\n        const link = document.createElement('a');\r\n        link.href = imgB64;\r\n        link.download = 'Elastigantt.png';\r\n        document.body.appendChild(link);\r\n        link.click();\r\n        document.body.removeChild(link);\r\n      });\r\n    },\r\n    recenterPosition() {\r\n      this.root.$emit('recenterPosition')\r\n    }\r\n  },\r\n  computed: {\r\n    scale: {\r\n      get() {\r\n        return this.root.state.times.timeZoom;\r\n      },\r\n      set(value) {\r\n        this.root.state.times.timeZoom = Number(value);\r\n      }\r\n    },\r\n    height: {\r\n      get() {\r\n        return this.root.state.row.height;\r\n      },\r\n      set(value) {\r\n        this.root.state.row.height = Number(value);\r\n        this.root.calculateTaskListColumnsWidths();\r\n      }\r\n    },\r\n    scope: {\r\n      get() {\r\n        return this.root.state.scope.before;\r\n      },\r\n      set(value) {\r\n        this.root.state.scope.before = Number(value);\r\n        this.root.state.scope.after = Number(value);\r\n      }\r\n    },\r\n    divider: {\r\n      get() {\r\n        return this.root.state.taskList.percent;\r\n      },\r\n      set(value) {\r\n        this.root.state.taskList.percent = Number(value);\r\n        this.root.calculateTaskListColumnsWidths();\r\n      }\r\n    }\r\n  }\r\n}\n</script>\r\n","<template>\r\n<div class=\"elastigantt__task-list-resizer\" style=\"getStyle\"></div>\r\n</template>\r\n<script>\r\nexport default {\r\n  inject: ['root'],\r\n  props: ['column'],\r\n  data() {\r\n    return {};\r\n  },\r\n  computed: {\r\n    getStyle() {\r\n      const state = this.root.state;\r\n      return {\r\n        height: '100%',\r\n        width: root.state.taskList.resizerWidth + 'px'\r\n      };\r\n    }\r\n  }\r\n}\r\n</script>\r\n","<template>\n<div class=\"elastigantt__task-list-column-expander\" :style=\"root.state.taskList.styles.expander.wrapper\">\n  <svg :width=\"root.state.taskList.expander.size\" :height=\"root.state.taskList.expander.size\" :style=\"root.state.taskList.styles.expander.content\">\n  <rect\n    :x=\"border\"\n    :y=\"border\"\n    :width=\"root.state.taskList.expander.size-border*2\"\n    :height=\"root.state.taskList.expander.size-border*2\"\n    rx=\"2\"\n    ry=\"2\"\n    :style=\"root.state.taskList.styles.expander\"\n    v-if=\"allChildren.length\"\n    @click=\"toggle\">\n  </rect>\n  <line v-if=\"allChildren.length\"\n    :x1=\"lineOffset\"\n    :y1=\"root.state.taskList.expander.size/2\"\n    :x2=\"root.state.taskList.expander.size-lineOffset\"\n    :y2=\"root.state.taskList.expander.size/2\"\n    :style=\"lineStyle\"\n    @click=\"toggle\">\n  </line>\n  <line v-if=\"collapsed\"\n    :x1=\"root.state.taskList.expander.size/2\"\n    :y1=\"lineOffset\"\n    :x2=\"root.state.taskList.expander.size/2\"\n    :y2=\"root.state.taskList.expander.size-lineOffset\"\n    :style=\"lineStyle\"\n    @click=\"toggle\">\n  </line>\n</svg>\n</div>\n</template>\r\n\r\n<script>\nexport default {\r\n  inject: ['root'],\r\n  props: ['tasks'],\r\n  data() {\r\n    const border = 0.5;\r\n    return {\r\n      border,\r\n      borderStyle: {\r\n        'fill': '#ffffffa0',\r\n        'stroke': '#000000',\r\n        'stroke-width': border\r\n      },\r\n      lineOffset: 5,\r\n      lineStyle: {\r\n        'fill': 'transparent',\r\n        'stroke': '#000000',\r\n        'stroke-width': 1,\r\n        'stroke-linecap': 'round'\r\n      }\r\n    };\r\n  },\r\n  computed: {\r\n    allChildren() {\r\n      const children = [];\r\n      this.tasks.forEach(task => {\r\n        task.allChildren.forEach(child => {\r\n          children.push(child);\r\n        });\r\n      });\r\n      return children;\r\n    },\r\n    collapsed() {\r\n      if (this.tasks.length === 0) {\r\n        return false;\r\n      }\r\n      let collapsed = 0;\r\n      for (let i = 0, len = this.tasks.length; i < len; i++) {\r\n        if (this.tasks[i].collapsed) {\r\n          collapsed++;\r\n        }\r\n      }\r\n      return collapsed === this.tasks.length;\r\n    },\r\n  },\r\n  methods: {\r\n    toggle() {\r\n      if (this.allChildren.length === 0) {\r\n        return;\r\n      }\r\n      const collapsed = !this.collapsed;\r\n      this.tasks.forEach(task => {\r\n        task.collapsed = collapsed;\r\n        task.allChildren.forEach(child => {\r\n          let parentsNotCollapsed = child.parents.filter(parent => parent.collapsed === false).length === child.parents.length;\r\n          child.visible = !collapsed;\r\n        });\r\n      });\r\n    }\r\n  }\r\n}\n</script>\r\n","<template>\n<div class=\"elastigantt__task-list-header\">\r\n  <div class=\"elastigantt__task-list-header-column\" v-for=\"column in root.state.taskList.columns\" :key=\"column._id\" :style=\"getStyle(column)\">\r\n    <task-list-expander v-if=\"column.expander\" :style=\"expanderStyle\" :tasks=\"collapsible\"></task-list-expander>\r\n    <div class=\"elastigantt__task-list-header-label\" :style=\"column.styles.label\" :column=\"column\" @mouseup=\"resizerMouseUp($event, column)\">{{column.label}}</div>\r\n    <div class=\"elastigantt__task-list-header-resizer\" :column=\"column\" @mousedown=\"resizerMouseDown($event, column)\"></div>\r\n  </div>\r\n</div>\n</template>\r\n\r\n<script>\nimport TaskListExpander from './Expander.vue';\r\n\r\nexport default {\r\n  components: {\r\n    'task-list-expander': TaskListExpander,\r\n  },\r\n  inject: ['root'],\r\n  props: ['expanderStyle'],\r\n  data() {\r\n    return {\r\n      resizer: {\r\n        moving: false,\r\n        x: 0\r\n      }\r\n    };\r\n  },\r\n  computed: {\r\n    getStyle() {\r\n      return column => {\r\n        const state = this.root.state;\r\n        return Object.assign({\r\n          'height': (state.calendar.height + state.calendar.styles.column['stroke-width']) + 'px',\r\n          'margin-bottom': state.calendar.gap + 'px',\r\n          'width': column.finalWidth + 'px'\r\n        }, state.taskList.styles.header);\r\n      }\r\n    },\r\n    collapsible() {\r\n      return this.root.state.tasks.filter(task => task.allChildren.length > 0);\r\n    }\r\n  },\r\n  methods: {\r\n    resizerMouseDown(event, column) {\r\n      if (!this.resizerMoving) {\r\n        this.resizer.moving = column;\r\n        this.resizer.x = event.clientX;\r\n        this.resizer.initialWidth = column.width;\r\n      }\r\n    },\r\n    resizerMouseMove(event) {\r\n      if (this.resizer.moving) {\r\n        this.resizer.moving.width = this.resizer.initialWidth + event.clientX - this.resizer.x;\r\n        this.root.calculateTaskListColumnsWidths();\r\n      }\r\n    },\r\n    resizerMouseUp(event) {\r\n      if (this.resizer.moving) {\r\n        this.resizer.moving = false;\r\n        this.root.calculateTaskListColumnsWidths();\r\n      }\r\n    }\r\n  },\r\n  created() {\r\n    this.root.$on('mousemove', this.resizerMouseMove);\r\n    this.root.$on('mouseup', this.resizerMouseUp);\r\n  }\r\n}\n</script>\r\n","<template>\n<div class=\"elastigantt__task-list-item-column\" :style=\"column.style\">\r\n  <slot></slot>\r\n  <div class=\"elastigantt__task-list-item-value\" :style=\"column.styles.value\">{{task[column.value]}}</div>\r\n</div>\n</template>\r\n<script>\nexport default {\r\n  inject: ['root'],\r\n  props: ['column', 'task'],\r\n  data() {\r\n    return {};\r\n  },\r\n}\n</script>\r\n","<template>\n<div class=\"elastigantt__task-list-item\" :style=\"root.state.taskList.styles.row\">\r\n  <item-column v-for=\"column in root.state.taskList.columns\" :key=\"column._id\" :column=\"column\" :task=\"task\">\r\n    <task-list-expander v-if=\"column.expander\" :tasks=\"[task]\" :style=\"expanderStyle\"></task-list-expander>\r\n  </item-column>\r\n</div>\n</template>\r\n<script>\nimport TaskListExpander from './Expander.vue';\r\nimport ItemColumn from './ItemColumn.vue';\r\n\r\nexport default {\r\n  components: {\r\n    'task-list-expander': TaskListExpander,\r\n    'item-column': ItemColumn\r\n  },\r\n  inject: ['root'],\r\n  props: ['task', 'expanderStyle'],\r\n  data() {\r\n    return {};\r\n  },\r\n}\n</script>\r\n","<template>\n<foreignObject class=\"elastigantt__task-list-object\" x=\"0\" y=\"0\" width=\"100%\" height=\"100%\" v-if=\"root.state.taskList.display\">\r\n  <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"elastigantt__task-list-container\">\r\n    <div v-html=\"root.state.defs.join('')\"></div>\r\n    <task-list-resizer></task-list-resizer>\r\n    <task-list-header :expander-style=\"getHeaderExpanderStyle\"></task-list-header>\r\n    <task-list-item v-for=\"task in root.visibleTasks\" :key=\"task.id\" :task=\"task\" :expander-style=\"getListExpanderStyle(task)\"></task-list-item>\r\n  </div>\r\n</foreignObject>\n</template>\r\n<script>\nimport TaskListResizer from './Resizer.vue';\r\nimport TaskListHeader from './TaskListHeader.vue';\r\nimport TaskListItem from './TaskListItem.vue';\r\n\r\nexport default {\r\n  components: {\r\n    'task-list-resizer': TaskListResizer,\r\n    'task-list-header': TaskListHeader,\r\n    'task-list-item': TaskListItem,\r\n  },\r\n  inject: ['root'],\r\n  data() {\r\n    return {};\r\n  },\r\n  computed: {\r\n    getHeaderExpanderStyle() {\r\n      const state = this.root.state;\r\n      const padding = this.root.getMaximalLevel() * state.taskList.expander.padding;\r\n      return Object.assign({}, state.taskList.styles.header, {\r\n        'width': (state.taskList.expander.width + state.calendar.styles.column['stroke-width'] + state.taskList.expander.margin) / 100 * state.taskList.percent + 'px',\r\n        'height': state.calendar.height + state.calendar.styles.column['stroke-width'] + 'px',\r\n        'margin-bottom': state.calendar.gap + 'px',\r\n        'padding-right': state.taskList.expander.margin + 'px',\r\n        'padding-left': state.taskList.expander.margin + 'px',\r\n        'margin': 'auto 0px',\r\n        'display': 'inline-flex'\r\n      });\r\n    },\r\n    getListExpanderStyle() {\r\n      return task => {\r\n        const state = this.root.state;\r\n        const padding = (task.parents.length - 1) * state.taskList.expander.padding;\r\n        const fullPadding = this.root.getMaximalLevel() * state.taskList.expander.padding;\r\n        let height = state.row.height + (state.grid.horizontal.gap * 2) - state.grid.horizontal.style.strokeWidth;\r\n        let width = (state.taskList.expander.width + state.calendar.styles.column['stroke-width'] + padding + state.taskList.expander.margin) / 100 * state.taskList.percent;\r\n        const style = {\r\n          'width': width + 'px',\r\n          'height': height + 'px',\r\n          'border-color': '#00000010',\r\n          'padding-left': padding + state.taskList.expander.margin + 'px',\r\n          'margin': 'auto 0px',\r\n        };\r\n        return style;\r\n      }\r\n    }\r\n  }\r\n}\n</script>\r\n","<template>\n<g>\r\n  <line class=\"elastigantt__grid-horizontal-line\" v-for=\"(line,index) in horizontalLines\" :key=\"line.key\" :x1=\"line.x1\" :y1=\"line.y1\" :x2=\"line.x2\" :y2=\"line.y2\" :style=\"getHStyle\"></line>\r\n  <line class=\"elastigantt__grid-vertical-line\" v-for=\"(line,index) in verticalLines\" :key=\"line.key\" :x1=\"line.x1\" :y1=\"line.y1\" :x2=\"line.x2\" :y2=\"line.y2\" :style=\"getVStyle\"></line>\r\n  <line class=\"elastigantt__grid-time-line\" :x1=\"timeLinePosition.x\" :y1=\"timeLinePosition.y1\" :x2=\"timeLinePosition.x\" :y2=\"timeLinePosition.y2\" :style=\"root.state.grid.timeLine.style\"></line>\r\n</g>\n</template>\r\n<script>\nexport default {\r\n  inject: ['root'],\r\n  data() {\r\n    return {};\r\n  },\r\n  created() {\r\n    this.root.$on('recenterPosition', this.recenterPosition);\r\n  },\r\n  methods: {\r\n    recenterPosition() {\r\n      this.root.scrollToTime(this.timeLinePosition.time);\r\n    }\r\n  },\r\n  computed: {\r\n    inViewPort() {\r\n      return (line) => {\r\n        const state = this.root.state;\r\n        return line.x1 >= state.scroll.tree.left && line.x1 <= state.scroll.tree.right;\r\n      }\r\n    },\r\n    timeLinePosition() {\r\n      const state = this.root.state;\r\n      const d = new Date();\r\n      const current = d.getTime();\r\n      const currentOffset = this.root.timeToPixelOffsetX(current);\r\n      const timeLine = {\r\n        x: 0,\r\n        y1: state.calendar.height + state.calendar.gap,\r\n        y2: '100%',\r\n        dateTime: '',\r\n        time: current\r\n      };\r\n      timeLine.x = currentOffset;\r\n      timeLine.dateTime = d.toLocaleDateString();\r\n      return timeLine;\r\n    },\r\n    getVStyle() {\r\n      return this.root.state.grid.vertical.style;\r\n    },\r\n    getHStyle() {\r\n      return this.root.state.grid.horizontal.style;\r\n    },\r\n    verticalLines() {\r\n      let lines = [];\r\n      const state = this.root.state;\r\n      for (let step = 0; step <= state.times.steps; step++) {\r\n        let x = step * state.times.stepPx + state.grid.vertical.style.strokeWidth / 2;\r\n        lines.push({\r\n          key: step,\r\n          x1: x,\r\n          y1: state.calendar.height + state.calendar.styles.column['stroke-width'] + state.calendar.gap,\r\n          x2: x,\r\n          y2: state.calendar.height + state.calendar.styles.column['stroke-width'] + state.calendar.gap + (state.tasks.length * (state.row.height + state.grid.horizontal.gap * 2)) + state.grid.horizontal.style.strokeWidth\r\n        });\r\n      }\r\n      return state.grid.vertical.lines = lines;\r\n    },\r\n    horizontalLines() {\r\n      let lines = [];\r\n      const state = this.root.state;\r\n      let tasks = this.root.visibleTasks;\r\n      for (let index = 0, len = tasks.length; index <= len; index++) {\r\n        let x2 = state.times.steps * state.times.stepPx + state.grid.vertical.style.strokeWidth;\r\n        /*if (x2 > state.scroll.tree.right) {\r\n          x2 = state.scroll.tree.right;\r\n        }*/\r\n        lines.push({\r\n          key: 'hl' + index,\r\n          x1: 0,\r\n          y1: index * (state.row.height + state.grid.horizontal.gap * 2) + state.calendar.height + state.calendar.styles.column['stroke-width'] + state.calendar.gap + state.grid.horizontal.style.strokeWidth / 2,\r\n          x2: x2,\r\n          y2: index * (state.row.height + state.grid.horizontal.gap * 2) + state.calendar.height + state.calendar.styles.column['stroke-width'] + state.calendar.gap + state.grid.horizontal.style.strokeWidth / 2\r\n        });\r\n      }\r\n      return state.grid.horizontal.lines = lines;\r\n    }\r\n  }\r\n}\n</script>\r\n","<template>\n<g class=\"elastigantt__calendar-row-group\">\r\n  <rect class=\"elastigantt__calendar-row\" :x=\"item.x\" :y=\"item.y\" :width=\"item.width\" :height=\"item.height\" :style=\"root.state.calendar.styles.row\"></rect>\r\n  <text\r\n    :x=\"getTextX\"\r\n    :y=\"getTextY\"\r\n    alignment-baseline=\"middle\"\r\n    text-anchor=\"middle\"\r\n    :style=\"root.state.calendar.styles.text\">{{item.label}}</text>\r\n</g>\n</template>\r\n<script>\nexport default {\r\n  inject: ['root'],\r\n  props: ['item'],\r\n  data() {\r\n    return {};\r\n  },\r\n  computed: {\r\n    inViewPort() {\r\n      const state = this.root.state;\r\n      const item = this.item;\r\n      return (item.x <= state.scroll.tree.right && item.x + item.width >= state.scroll.tree.left) ||\r\n        (item.x <= state.scroll.tree.left && item.x + item.width >= state.scroll.tree.right);\r\n    },\r\n    getTextX() {\r\n      return this.item.x + this.item.width / 2;\r\n    },\r\n    getTextY() {\r\n      return this.item.y + this.item.height / 2;\r\n    }\r\n  }\r\n}\n</script>\r\n","<template>\r\n<g class=\"elastigantt__calendar-group\">\r\n  <foreignObject :x=\"getX\" :y=\"getY\" :width=\"getWidth\" :height=\"root.state.calendar.height\">\r\n    <div class=\"elastigantt__calendar\" :style=\"root.state.calendar.styles.wrapper\" xmlns=\"http://www.w3.org/1999/xhtml\"></div>\r\n  </foreignObject>\r\n  <calendar-row v-for=\"(month,index) in months\" :key=\"month.key\" :item=\"month\"></calendar-row>\r\n  <calendar-row v-for=\"(day,index) in days\" :key=\"day.key\" :item=\"day\"></calendar-row>\r\n  <calendar-row v-for=\"(hour,index) in hours\" :key=\"hour.key\" :item=\"hour\"></calendar-row>\r\n</g>\r\n</template>\r\n<script>\r\nimport CalendarRow from './CalendarRow.vue';\r\nexport default {\r\n  components: {\r\n    'calendar-row': CalendarRow\r\n  },\r\n  inject: ['root'],\r\n  data() {\r\n    return {\r\n      cache: {}\r\n    };\r\n  },\r\n  methods: {\r\n    howManyHoursFit(current = 24, currentRecurrection = 1) {\r\n      let max = {\r\n        short: 0,\r\n        medium: 0,\r\n        long: 0\r\n      };\r\n      const state = this.root.state;\r\n      state.ctx.font = state.calendar.day.fontSize + ' ' + state.calendar.fontFamily;\r\n      let firstDate = dayjs(state.times.firstDate);\r\n      for (let i = 0; i < current; i++) {\r\n        let currentDate = firstDate.add(i, 'hours').toDate();\r\n        let textWidth = {\r\n          short: state.ctx.measureText(state.calendar.hour.format.short(currentDate)).width,\r\n          medium: state.ctx.measureText(state.calendar.hour.format.medium(currentDate)).width,\r\n          long: state.ctx.measureText(state.calendar.hour.format.long(currentDate)).width\r\n        };\r\n        if (textWidth.short >= max.short) {\r\n          max.short = textWidth.short;\r\n        }\r\n        if (textWidth.medium >= max.medium) {\r\n          max.medium = textWidth.medium;\r\n        }\r\n        if (textWidth.long >= max.long) {\r\n          max.long = textWidth.long;\r\n        }\r\n      }\r\n      let cellWidth = state.times.stepPx / current - state.calendar.styles.column['stroke-width'] - 2;\r\n      if (current > 1) {\r\n        if (max.short > cellWidth) {\r\n          currentRecurrection++;\r\n          return this.howManyHoursFit(Math.ceil(current / currentRecurrection), currentRecurrection);\r\n        }\r\n      }\r\n      if (currentRecurrection < 3) {\r\n        if (max.long <= cellWidth) {\r\n          return {\r\n            count: current,\r\n            type: 'long'\r\n          };\r\n        }\r\n        if (max.medium <= cellWidth) {\r\n          return {\r\n            count: current,\r\n            type: 'medium'\r\n          };\r\n        }\r\n      }\r\n      if (max.short <= cellWidth && current > 1) {\r\n        return {\r\n          count: current,\r\n          type: 'short'\r\n        };\r\n      }\r\n      return {\r\n        count: 0,\r\n        type: 'short'\r\n      };\r\n    },\r\n    howManyDaysFit(current = this.root.state.times.steps, currentRecurrection = 1) {\r\n      let max = {\r\n        short: 0,\r\n        medium: 0,\r\n        long: 0\r\n      };\r\n      const state = this.root.state;\r\n      state.ctx.font = state.calendar.day.fontSize + ' ' + state.calendar.fontFamily;\r\n      let firstDate = dayjs(state.times.firstDate);\r\n      for (let i = 0; i < current; i++) {\r\n        let currentDate = firstDate.add(i, 'days').toDate();\r\n        let textWidth = {\r\n          short: state.ctx.measureText(state.calendar.day.format.short(currentDate)).width,\r\n          medium: state.ctx.measureText(state.calendar.day.format.medium(currentDate)).width,\r\n          long: state.ctx.measureText(state.calendar.day.format.long(currentDate)).width\r\n        };\r\n        if (textWidth.short >= max.short) {\r\n          max.short = textWidth.short;\r\n        }\r\n        if (textWidth.medium >= max.medium) {\r\n          max.medium = textWidth.medium;\r\n        }\r\n        if (textWidth.long >= max.long) {\r\n          max.long = textWidth.long;\r\n        }\r\n      }\r\n      let cellWidth = state.times.totalViewDurationPx / current - state.calendar.styles.column['stroke-width'] - 2;\r\n      if (current > 1) {\r\n        if (max.short > cellWidth) {\r\n          currentRecurrection++;\r\n          return this.howManyDaysFit(Math.ceil(current / currentRecurrection), currentRecurrection);\r\n        }\r\n      }\r\n      if (max.long <= cellWidth) {\r\n        return {\r\n          count: current,\r\n          type: 'long'\r\n        };\r\n      }\r\n      if (max.medium <= cellWidth) {\r\n        return {\r\n          count: current,\r\n          type: 'medium'\r\n        };\r\n      }\r\n      if (max.short <= cellWidth && current > 1) {\r\n        return {\r\n          count: current,\r\n          type: 'short'\r\n        };\r\n      }\r\n      return {\r\n        cunt: 0,\r\n        type: 'short'\r\n      };\r\n    },\r\n    hourTextStyle() {\r\n      return 'font-family:' + this.root.state.calendar.hour.fontFamily + ';font-size:' + this.root.state.calendar.hour.fontSize;\r\n    },\r\n    dayTextStyle() {\r\n      return 'font-family:' + this.root.state.calendar.day.fontFamily + ';font-size:' + this.root.state.calendar.day.fontSize;\r\n    }\r\n  },\r\n  computed: {\r\n    getX() {\r\n      return this.root.state.calendar.styles.column['stroke-width'] / 2;\r\n    },\r\n    getY() {\r\n      return this.root.state.calendar.styles.column['stroke-width'] / 2;\r\n    },\r\n    getWidth() {\r\n      let width = this.root.state.width - this.root.state.calendar.styles.column['stroke-width'];\r\n      return width;\r\n    },\r\n\r\n    hours() {\r\n      let hours = [];\r\n      let hoursCount = this.howManyHoursFit();\r\n      let hourStep = 24 / hoursCount.count;\r\n      let state = this.root.state;\r\n      for (let i = 0, len = state.times.steps * hoursCount.count; i < len; i++) {\r\n        const date = new Date(state.times.firstTime + i * hourStep * 60 * 60 * 1000);\r\n        hours.push({\r\n          key: 'h' + i,\r\n          x: state.calendar.styles.column['stroke-width'] / 2 + i * state.times.stepPx / hoursCount.count,\r\n          y: state.calendar.styles.column['stroke-width'] / 2 + state.calendar.day.height + state.calendar.month.height,\r\n          width: state.times.stepPx / hoursCount.count,\r\n          height: state.calendar.hour.height,\r\n          label: state.calendar.hour.format[hoursCount.type](date)\r\n        });\r\n      }\r\n      return state.calendar.hours = hours;\r\n    },\r\n    days() {\r\n      let state = this.root.state;\r\n      let days = [];\r\n      let daysCount = this.howManyDaysFit();\r\n      let dayStep = state.times.steps / daysCount.count;\r\n      for (let i = 0, len = daysCount.count; i < len; i++) {\r\n        const date = new Date(state.times.firstTime + i * dayStep * 24 * 60 * 60 * 1000);\r\n        days.push({\r\n          key: 'd' + i,\r\n          x: state.calendar.styles.column['stroke-width'] / 2 + i * state.times.totalViewDurationPx / daysCount.count,\r\n          y: state.calendar.styles.column['stroke-width'] / 2 + state.calendar.month.height,\r\n          width: state.times.totalViewDurationPx / daysCount.count,\r\n          height: state.calendar.day.height,\r\n          label: state.calendar.day.format[daysCount.type](date)\r\n        });\r\n      }\r\n      return state.calendar.days = days;\r\n    },\r\n    months() {\r\n      let state = this.root.state;\r\n      let months = [];\r\n      let firstDate = state.times.firstDate;\r\n      let lastDate = state.times.lastDate;\r\n      let steps = state.times.steps;\r\n      let currentDate = dayjs(state.times.firstDate);\r\n      let currentMonth = currentDate.month();\r\n      let currentDays = 0;\r\n      let monthDays = [];\r\n      let currentDateObj = {\r\n        date: currentDate.clone().toDate(),\r\n        days: 0\r\n      };\r\n      for (let i = 0; i < steps; i++) {\r\n        currentDays++;\r\n        currentDate = currentDate.clone().add(1, 'days');\r\n        if (currentDate.month() !== currentMonth) {\r\n          currentMonth = currentDate.month();\r\n          currentDateObj.days = currentDays;\r\n          monthDays.push(currentDateObj);\r\n          currentDateObj = {\r\n            date: currentDate.clone().toDate(),\r\n            days: 0\r\n          };\r\n          currentDays = 0;\r\n        }\r\n      }\r\n      if (currentDays) {\r\n        currentDateObj.days = currentDays;\r\n        monthDays.push(currentDateObj);\r\n      }\r\n      let currentOffset = state.calendar.styles.column['stroke-width'] / 2;\r\n      for (let i = 0, len = monthDays.length; i < len; i++) {\r\n        let days = monthDays[i].days;\r\n        let date = monthDays[i].date;\r\n        let width = state.times.stepPx * days;\r\n        let format = 'long';\r\n        if (state.ctx.measureText(state.calendar.month.format[format](date)).width > width) {\r\n          format = 'medium';\r\n          if (state.ctx.measureText(state.calendar.month.format[format](date)).width > width) {\r\n            format = 'short';\r\n          }\r\n        };\r\n        months.push({\r\n          key: 'm' + i,\r\n          x: currentOffset,\r\n          y: state.calendar.styles.column['stroke-width'] / 2,\r\n          width: width,\r\n          height: state.calendar.day.height,\r\n          label: state.calendar.month.format[format](date)\r\n        });\r\n        currentOffset += width;\r\n      }\r\n      return state.calendar.months = months;\r\n    }\r\n  }\r\n}\r\n</script>\r\n","<template>\r\n<g class=\"elastigantt__tree-dependency-lines-container\">\r\n  <g v-for=\"task in dependencyTasks\" :key=\"task.id\" :task=\"task\">\r\n    <path v-for=\"dependencyLine in task.dependencyLines\" :key=\"dependencyLine.id\" :task=\"task\" :d=\"dependencyLine.points\" :style=\"root.state.dependencyLines.style\">\r\n    </path>\r\n  </g>\r\n</g>\r\n</template>\r\n<script>\r\nexport default {\r\n  inject: ['root'],\r\n  props: ['tasks'],\r\n  data() {\r\n    return {};\r\n  },\r\n  methods: {\r\n    getPoints(fromTaskId, toTaskId) {\r\n      const state = this.root.state;\r\n      const fromTask = this.root.getTask(fromTaskId);\r\n      const toTask = this.root.getTask(toTaskId);\r\n      if (!toTask.visible || !fromTask.visible) {\r\n        return '';\r\n      }\r\n      const startX = fromTask.x + fromTask.width;\r\n      const startY = fromTask.y + fromTask.height / 2;\r\n      const stopX = toTask.x;\r\n      const stopY = toTask.y + toTask.height / 2;\r\n      const distanceX = stopX - startX;\r\n      let distanceY;\r\n      let yMultiplier = 1;\r\n      if (stopY >= startY) {\r\n        distanceY = stopY - startY;\r\n      } else {\r\n        distanceY = startY - stopY;\r\n        yMultiplier = -1;\r\n      }\r\n      const offset = 10;\r\n      const roundness = 4;\r\n      const isBefore = distanceX <= offset + roundness;\r\n      let points = `M ${startX} ${startY}\r\n          L ${startX + offset},${startY} `;\r\n      if (isBefore) {\r\n        points +=\r\n          `Q ${startX + offset + roundness},${startY} ${startX + offset + roundness},${startY + roundness * yMultiplier}\r\n            L ${startX + offset + roundness},${startY + (distanceY * yMultiplier) / 2 - (roundness * yMultiplier)}\r\n            Q ${startX + offset + roundness},${startY + (distanceY * yMultiplier) / 2} ${startX + offset},${startY + (distanceY * yMultiplier) / 2}\r\n            L ${startX - offset + distanceX},${startY + (distanceY * yMultiplier) / 2}\r\n            Q ${startX - offset + distanceX - roundness},${startY + (distanceY * yMultiplier) / 2} ${startX - offset + distanceX - roundness},${startY + (distanceY * yMultiplier) / 2 + (roundness * yMultiplier)}\r\n            L ${startX - offset + distanceX - roundness},${stopY - roundness * yMultiplier}\r\n            Q ${startX - offset + distanceX - roundness},${stopY} ${startX - offset + distanceX},${stopY}\r\n            L ${stopX},${stopY}`;\r\n      } else {\r\n        points +=\r\n          `L ${startX + distanceX / 2 - roundness},${startY}\r\n            Q ${startX + distanceX / 2},${startY} ${startX + distanceX / 2},${startY + roundness * yMultiplier}\r\n            L ${startX + distanceX / 2},${stopY - roundness * yMultiplier}\r\n            Q ${startX + distanceX / 2},${stopY} ${startX + distanceX / 2 + roundness},${stopY}\r\n            L ${stopX},${stopY}`;\r\n      }\r\n      return points;\r\n    }\r\n  },\r\n  computed: {\r\n    dependencyTasks() {\r\n      return this.tasks.filter(task => typeof task.dependentOn !== 'undefined').map(task => {\r\n        task.dependencyLines = task.dependentOn.map(id => {\r\n          return {\r\n            points: this.getPoints(id, task.id)\r\n          };\r\n        });\r\n        return task;\r\n      });\r\n    }\r\n  }\r\n}\r\n</script>\r\n","<template>\r\n<svg :x=\"task.x+task.width + root.state.treeText.offset\" :y=\"task.y\" :width=\"getWidth\" :height=\"task.height\">\r\n  <rect x=\"0\" y=\"0\" width=\"100%\" height=\"100%\" :style=\"root.state.treeText.styles.background\"></rect>\r\n  <text :x=\"root.state.treeText.xPadding\" y=\"50%\" :style=\"root.state.treeText.styles.text\" alignment-baseline=\"middle\">{{task.label}}</text>\r\n</svg>\r\n</template>\r\n<script>\r\nexport default {\r\n  inject: ['root'],\r\n  props: ['task'],\r\n  data() {\r\n    return {};\r\n  },\r\n  computed: {\r\n    getWidth() {\r\n      const textStyle = this.root.state.treeText.styles.text;\r\n      this.root.state.ctx.font = `${textStyle['font-weight']} ${textStyle['font-size']} ${textStyle['font-family']}`;\r\n      const textWidth = this.root.state.ctx.measureText(this.task.label).width;\r\n      return textWidth + this.root.state.treeText.xPadding * 2;\r\n    }\r\n  }\r\n}\r\n</script>\r\n","<template>\r\n<svg class=\"elastigantt__info\"\r\n    :x=\"getX\"\r\n    :y=\"task.y\"\r\n    :width=\"getWidth\"\r\n    :height=\"root.state.row.height\"\r\n    xmlns=\"http://www.w3.org/2000/svg\">\r\n  <rect x=\"0\" y=\"0\" width=\"100%\" height=\"100%\" :style=\"root.state.info.style\"></rect>\r\n  <text x=\"50%\" y=\"50%\" :style=\"getTextStyle\" text-anchor=\"middle\" alignment-baseline=\"middle\">{{task.label}}</text>\r\n</svg>\r\n</template>\r\n<script>\r\nexport default {\r\n  inject: ['root'],\r\n  props: ['task'],\r\n  data() {\r\n    return {};\r\n  },\r\n  computed: {\r\n    getX() {\r\n      const state = this.root.state;\r\n      this.root.state.ctx.font = `${root.state.info.fontWeight} ${root.state.info.fontSize} ${root.state.info.fontFamily}`;\r\n      const textWidth = this.root.state.ctx.measureText(this.task.label).width / 2 + 10;\r\n      return this.task.x + this.task.width / 2 - textWidth;\r\n    },\r\n    getWidth() {\r\n      return this.root.state.ctx.measureText(this.task.label).width + 20;\r\n    },\r\n    getTextStyle() {\r\n      let state = this.root.state;\r\n      return `${root.state.info.textStyle};font-family:${root.state.info.fontFamily};font-size:${\r\n            root.state.info.fontSize};font-weight:${root.state.info.fontWeight};`;\r\n    }\r\n  }\r\n}\r\n</script>\r\n","<template>\r\n<g>\r\n  <defs>\r\n    <pattern id=\"diagonalHatch\" :width=\"root.state.progress.width\" :height=\"root.state.progress.width\" patternTransform=\"rotate(45 0 0)\" patternUnits=\"userSpaceOnUse\">\r\n      <line x1=\"0\" y1=\"0\" x2=\"0\" :y2=\"root.state.progress.width\" :style=\"root.state.progress.styles.line\" />\r\n    </pattern>\r\n  </defs>\r\n  <!--<rect id=\"elastigantt__tree-row-progress\" x=\"0\" y=\"0\" height=\"30%\" :width=\"getProgressWidth\" style=\"fill:#00ff92a0\"></rect>-->\r\n  <rect :x=\"getProgressWidth\" y=\"0\" :width=\"100-task.progress+'%'\" height=\"100%\" :style=\"root.state.progress.styles.bar\"></rect>\r\n  <path :d=\"getLinePoints\" :style=\"getLineStyle\"></path>\r\n</g>\r\n</template>\r\n<script>\r\nexport default {\r\n  inject: ['root'],\r\n  props: ['task'],\r\n  data() {\r\n    return {};\r\n  },\r\n  computed: {\r\n    getProgressWidth() {\r\n      return this.task.progress + '%';\r\n    },\r\n    getLinePoints() {\r\n      const start = this.task.width / 100 * this.task.progress;\r\n      return `M ${start} 0 L ${start} ${this.task.height}`;\r\n    },\r\n    getLineStyle() {\r\n      return {\r\n        stroke: this.root.state.row.styles.bar.stroke + 'a0',\r\n        'stroke-width': this.root.state.row.styles.bar['stroke-width'] / 2\r\n      };\r\n    }\r\n  }\r\n}\r\n</script>\r\n","<template>\r\n<g class=\"elastigantt__tree-row-task-group\" @mouseover=\"treeRowMouseOver\" @mouseout=\"treeRowMouseOut\">\r\n  <svg class=\"elastigantt__tree-row-task\"\r\n      :x=\"task.x\"\r\n      :y=\"task.y\"\r\n      :width=\"task.width\"\r\n      :height=\"task.height\"\r\n      @click=\"treeRowClick\"\r\n      xmlns=\"http://www.w3.org/2000/svg\">\r\n    <defs>\r\n      <clipPath id=\"elastigantt__task-clip-path\">\r\n        <polygon :points=\"getPoints\"></polygon>\r\n      </clipPath>\r\n    </defs>\r\n    <polygon :points=\"getPoints\" :style=\"root.state.row.styles.bar\"></polygon>\r\n    <tree-progress-bar :task=\"task\" clip-path=\"url(#elastigantt__task-clip-path)\"></tree-progress-bar>\r\n  </svg>\r\n  <tree-text :task=\"task\" v-if=\"root.state.row.showText\"></tree-text>\r\n  <info :task=\"task\" v-if=\"root.state.info.display && task.mouseOver\"></info>\r\n</g>\r\n</template>\r\n<script>\r\nimport TreeText from '../Text.vue';\r\nimport Info from '../Info.vue';\r\nimport ProgressBar from '../ProgressBar.vue';\r\n\r\nexport default {\r\n  components: {\r\n    'tree-text': TreeText,\r\n    'info': Info,\r\n    'tree-progress-bar': ProgressBar\r\n  },\r\n  inject: ['root'],\r\n  props: ['task'],\r\n  data() {\r\n    return {};\r\n  },\r\n  computed: {\r\n    getViewBox() {\r\n      const task = this.task;\r\n      return `0 0 ${task.width} ${task.height}`;\r\n    },\r\n    getGroupTransform() {\r\n      return `translate(${this.task.x} ${this.task.y})`;\r\n    },\r\n    getPoints() {\r\n      const task = this.task;\r\n      const fifty = this.task.height - this.task.height / 4;\r\n      const full = this.task.height;\r\n      const offset = 10;\r\n      return `0,0 ${task.width},0 ${task.width},${task.height} 0,${task.height}`;\r\n    }\r\n  },\r\n  methods: {\r\n    treeRowClick() {\r\n      this.task.tooltip.visible = !this.task.tooltip.visible;\r\n    },\r\n    treeRowMouseOver() {\r\n      this.task.mouseOver = true;\r\n    },\r\n    treeRowMouseOut() {\r\n      this.task.mouseOver = false;\r\n    }\r\n  }\r\n}\r\n</script>\r\n","<template>\r\n<g class=\"elastigantt__tree-row-milestone-group\" @mouseover=\"treeRowMouseOver\" @mouseout=\"treeRowMouseOut\">\r\n  <svg class=\"elastigantt__tree-row-milestone\"\r\n    :x=\"task.x\"\r\n    :y=\"task.y\"\r\n    :width=\"task.width\"\r\n    :height=\"task.height\"\r\n    @click=\"treeRowClick\"\r\n    xmlns=\"http://www.w3.org/2000/svg\"\r\n  >\r\n  <defs>\r\n    <clipPath id=\"elastigantt__milestone-clip-path\">\r\n      <polygon :points=\"getPoints\"></polygon>\r\n    </clipPath>\r\n  </defs>\r\n    <polygon :points=\"getPoints\" :style=\"root.state.row.styles.bar\"></polygon>\r\n    <tree-progress-bar :task=\"task\" clip-path=\"url(#elastigantt__milestone-clip-path)\">\r\n    </tree-progress-bar>\r\n  </svg>\r\n  <tree-text :task=\"task\" v-if=\"root.state.row.showText\"></tree-text>\r\n  <info :task=\"task\" v-if=\"root.state.info.display && task.mouseOver\"></info>\r\n</g>\r\n</template>\r\n<script>\r\nimport TreeText from '../Text.vue';\r\nimport Info from '../Info.vue';\r\nimport ProgressBar from '../ProgressBar.vue';\r\n\r\nexport default {\r\n  components: {\r\n    'tree-text': TreeText,\r\n    'info': Info,\r\n    'tree-progress-bar': ProgressBar\r\n  },\r\n  inject: ['root'],\r\n  props: ['task'],\r\n  data() {\r\n    return {};\r\n  },\r\n  computed: {\r\n    getViewBox() {\r\n      return `0 0 ${this.task.width} ${this.task.height}`;\r\n    },\r\n    getGroupTransform() {\r\n      return `translate(${this.task.x} ${this.task.y})`;\r\n    },\r\n    getPoints() {\r\n      const task = this.task;\r\n      const fifty = task.height / 2;\r\n      let offset = fifty;\r\n      if (task.width / 2 - offset < 0) {\r\n        offset = task.width / 2;\r\n      }\r\n      return `0,${fifty}\r\n        ${offset},0\r\n        ${task.width - offset},0\r\n        ${task.width},${fifty}\r\n        ${task.width - offset},${task.height}\r\n        ${offset},${task.height}`;\r\n    }\r\n  },\r\n  methods: {\r\n    treeRowClick() {\r\n      this.task.tooltip.visible = !this.task.tooltip.visible;\r\n    },\r\n    treeRowMouseOver() {\r\n      this.task.mouseOver = true;\r\n    },\r\n    treeRowMouseOut() {\r\n      this.task.mouseOver = false;\r\n    }\r\n  }\r\n}\r\n</script>\r\n","<template>\r\n<g class=\"elastigantt__tree-row-project-group\" @mouseover=\"treeRowMouseOver\" @mouseout=\"treeRowMouseOut\">\r\n  <svg class=\"elastigantt__tree-row\"\r\n      :x=\"task.x\"\r\n      :y=\"task.y\"\r\n      :width=\"task.width\"\r\n      :height=\"task.height\"\r\n      @click=\"treeRowClick\"\r\n      xmlns=\"http://www.w3.org/2000/svg\">\r\n    <defs>\r\n      <clipPath id=\"elastigantt__project-clip-path\">\r\n        <path :d=\"getPoints\" :style=\"root.state.row.styles.bar\"></path>\r\n      </clipPath>\r\n    </defs>\r\n    <path :d=\"getPoints\" :style=\"root.state.row.styles.bar\"></path>\r\n    <tree-progress-bar :task=\"task\" clip-path=\"url(#elastigantt__project-clip-path)\"></tree-progress-bar>\r\n  </svg>\r\n  <tree-text :task=\"task\" v-if=\"root.state.row.showText\"></tree-text>\r\n  <info :task=\"task\" v-if=\"root.state.info.display && task.mouseOver\"></info>\r\n</g>\r\n</template>\r\n<script>\r\nimport TreeText from '../Text.vue';\r\nimport Info from '../Info.vue';\r\nimport ProgressBar from '../ProgressBar.vue';\r\n\r\nexport default {\r\n  components: {\r\n    'tree-text': TreeText,\r\n    'info': Info,\r\n    'tree-progress-bar': ProgressBar\r\n  },\r\n  inject: ['root'],\r\n  props: ['task'],\r\n  data() {\r\n    return {};\r\n  },\r\n  computed: {\r\n    getViewBox() {\r\n      return `0 0 ${this.task.width} ${this.task.height}`;\r\n    },\r\n    getGroupTransform() {\r\n      return `translate(${this.task.x} ${this.task.y})`;\r\n    },\r\n    getPoints() {\r\n      const task = this.task;\r\n      const fifty = task.height / 2;\r\n      let offset = fifty;\r\n      if (task.width / 2 - offset < 0) {\r\n        offset = task.width / 2;\r\n      }\r\n      const bottom = task.height - task.height / 4;\r\n      const corner = task.height / 6;\r\n      const smallCorner = task.height / 8;\r\n      return `M ${smallCorner},0\r\n                L ${task.width - smallCorner} 0\r\n                L ${task.width} ${smallCorner}\r\n                L ${task.width} ${bottom}\r\n                L ${task.width - corner} ${task.height}\r\n                L ${task.width - corner * 2} ${bottom}\r\n                L ${corner * 2} ${bottom}\r\n                L ${corner} ${task.height}\r\n                L 0 ${bottom}\r\n                L 0 ${smallCorner}\r\n                Z\r\n        `;\r\n      // return `M ${offset} ${task.height}\r\n      // Q 0 ${task.height} 0 ${fifty}\r\n      // Q 0 0 ${offset} 0\r\n      // L ${task.width - offset} 0\r\n      // Q ${task.width} 0 ${task.width} ${fifty}\r\n      // Q ${task.width} ${task.height} ${task.width - offset} ${task.height}\r\n      // L ${offset} ${task.height}\r\n      // Z`;\r\n    }\r\n  },\r\n  methods: {\r\n    treeRowClick() {\r\n      this.task.tooltip.visible = !this.task.tooltip.visible;\r\n    },\r\n    treeRowMouseOver() {\r\n      this.task.mouseOver = true;\r\n    },\r\n    treeRowMouseOut() {\r\n      this.task.mouseOver = false;\r\n    }\r\n  }\r\n}\r\n</script>\r\n","<template>\n<svg class=\"elastigantt_tree-object\"\r\n    x=\"0\"\r\n    y=\"0\"\r\n    :width=\"getWidth\"\r\n    :height=\"getHeight\"\r\n    xmlns=\"http://www.w3.org/2000/svg\">\r\n  <calendar></calendar>\r\n  <grid></grid>\r\n  <tree-dependency-lines :tasks=\"root.visibleTasks\"></tree-dependency-lines>\r\n  <g v-for=\"task in root.visibleTasks\"  :task=\"task\" >\r\n    <component :task=\"task\" :is=\"'tree-row-'+task.type\"></component>\r\n  </g>\r\n</svg>\n</template>\r\n<script>\nimport Grid from '../Grid/Grid.vue';\r\nimport Calendar from '../Calendar/Calendar.vue';\r\nimport DependencyLines from './DependencyLines.vue';\r\nimport Task from './Row/Task.vue';\r\nimport Milestone from './Row/Milestone.vue';\r\nimport Project from './Row/Project.vue';\r\n\r\nexport default {\r\n  components: {\r\n    'grid': Grid,\r\n    'tree-dependency-lines': DependencyLines,\r\n    'calendar': Calendar,\r\n    'tree-row-task': Task,\r\n    'tree-row-milestone': Milestone,\r\n    'tree-row-project': Project\r\n  },\r\n  inject: ['root'],\r\n  data() {\r\n    return {};\r\n  },\r\n  computed: {\r\n    getWidth() {\r\n      const state = this.root.state;\r\n      return state.width;\r\n    },\r\n    getHeight() {\r\n      const state = this.root.state;\r\n      return state.height;\r\n    }\r\n  }\r\n}\n</script>\r\n","<template>\n<div class=\"elastigantt__main\">\r\n  <main-header></main-header>\r\n  <svg :width=\"getWidth\" :height=\"root.state.outerHeight\" class=\"elastigantt__svg-container\" ref=\"svgMain\" xmlns=\"http://www.w3.org/2000/svg\">\r\n    <foreignObject x=\"0\" y=\"0\" width=\"100%\" height=\"100%\">\r\n          <div xmlns=\"http://www.w3.org/1999/xhtml\"  class=\"elastigantt__container\" @mousemove=\"mouseMove\" @mouseup=\"mouseUp\">\r\n            <div class=\"elastigantt__task-list-container\">\r\n              <svg ref=\"svgTaskList\" class=\"elastigantt__task-list-svg\" xmlns=\"http://www.w3.org/2000/svg\" :width=\"root.state.taskList.finalWidth\" :height=\"root.state.height\" v-if=\"root.state.taskList.display\">\r\n                <defs v-html=\"defs\"></defs>\r\n                <task-list></task-list>\r\n              </svg>\r\n</div>\r\n<div class=\"elastigantt__main-container\" ref=\"svgTreeContainer\" v-on:scroll=\"onScroll\" v-on:wheel=\"onWheel\">\r\n  <svg ref=\"svgTree\" xmlns=\"http://www.w3.org/2000/svg\" :width=\"root.state.width\" :height=\"root.state.height\">\r\n    <defs v-html=\"defs\"></defs>\r\n    <tree></tree>\r\n    </svg>\r\n</div>\r\n</div>\r\n</foreignObject>\r\n</svg>\r\n</div>\n</template>\r\n\r\n<script>\nimport Header from './Header.vue';\r\nimport TaskList from './TaskList/TaskList.vue';\r\nimport Tree from './Tree/Tree.vue';\r\n\r\nexport default {\r\n  components: {\r\n    'main-header': Header,\r\n    'task-list': TaskList,\r\n    'tree': Tree\r\n  },\r\n  inject: ['root'],\r\n  props: ['tasks', 'options'],\r\n  data() {\r\n    return {\r\n      defs: ''\r\n    };\r\n  },\r\n  created() {\r\n    let css = '';\r\n    try {\r\n      for (let i = 0, len = document.styleSheets.length; i < len; i++) {\r\n        let styleSheet = document.styleSheets[i];\r\n        if (styleSheet.title === 'elastigantt__style') {\r\n          for (let r = 0, rules = styleSheet.rules.length; r < rules; r++) {\r\n            let rule = styleSheet.rules[r];\r\n            css += rule.cssText + \"\\n\";\r\n          }\r\n          break;\r\n        }\r\n      }\r\n      // css       = \"<![CDATA[\\n\" + css + \"]]>\";\r\n      this.defs = `<style type=\"text/css\">${css}</style>`;\r\n      this.root.state.defs.push(this.defs);\r\n    } catch (e) {\r\n      console.log(\"Cannot add stylesheet to SVG. You must run this app from server.\");\r\n    }\r\n    // this.root.state.defs.forEach((def) => { this.defs += def; });\r\n  },\r\n  mounted() {\r\n    this.root.state.svgMain = this.$refs.svgMain;\r\n    this.root.state.svgTree = this.$refs.svgTree;\r\n    this.root.state.svgTreeContainer = this.$refs.svgTreeContainer;\r\n    this.root.state.svgTaskList = this.$refs.svgTaskList;\r\n  },\r\n  computed: {\r\n    getWidth() {\r\n      return this.root.state.width + this.root.state.taskList.finalWidth;\r\n    },\r\n    getMainStyle() {\r\n      const state = this.root.state;\r\n      return {\r\n        width: state.width + 'px'\r\n      };\r\n    }\r\n  },\r\n  methods: {\r\n    mouseMove(event) {\r\n      this.root.$emit('mousemove', event);\r\n    },\r\n    mouseUp(event) {\r\n      this.root.$emit('mouseup', event);\r\n    },\r\n    onScroll(ev) {\r\n      this.root.$emit('scroll.tree', ev);\r\n    },\r\n    onWheel(ev) {\r\n      this.root.$emit('wheel.tree', ev);\r\n    }\r\n  }\r\n}\n</script>\r\n","<template>\n<elastigantt-main :tasks=\"tasks\" :options=\"options\"></elastigantt-main>\n</template>\r\n\r\n<script>\nfunction getOptions(userOptions) {\r\n  return {\r\n    debug: false,\r\n    width: 0,\r\n    height: 0,\r\n    scroll: {\r\n      taskList: {\r\n        left: 0,\r\n        right: 0,\r\n        top: 0,\r\n        bottom: 0\r\n      },\r\n      tree: {\r\n        left: 0,\r\n        right: 0,\r\n        top: 0,\r\n        bottom: 0,\r\n        time: 0,\r\n        dateTime: {\r\n          left: '',\r\n          right: ''\r\n        }\r\n      }\r\n    },\r\n    svgElement: null,\r\n    scope: {\r\n      before: 1,\r\n      after: 1\r\n    },\r\n    times: {\r\n      timeScale: 60 * 1000,\r\n      timeZoom: 17,\r\n      timePerPixel: 0,\r\n      fistDate: null,\r\n      firstTime: null, // firstDate getTime()\r\n      lastDate: null,\r\n      lastTime: null, // last date getTime()\r\n      totalViewDurationMs: 0,\r\n      totalViewDurationPx: 0,\r\n      stepMs: 24 * 60 * 60 * 1000,\r\n      stepPx: 0,\r\n      steps: 0\r\n    },\r\n    row: {\r\n      height: 24,\r\n      styles: {\r\n        bar: {\r\n          'fill': '#ff0000a0',\r\n          'stroke': '#ff0000',\r\n          'stroke-width': '1'\r\n        },\r\n        text: {\r\n          'fill': '#ffffff',\r\n          'font-family': 'sans-serif',\r\n          'font-size': '12px'\r\n        }\r\n      },\r\n      showText: true\r\n    },\r\n    treeText: {\r\n      offset: 0,\r\n      styles: {\r\n        text: {\r\n          'font-family': 'sans-serif',\r\n          'font-size': '12px',\r\n          'font-weight': 'normal',\r\n          'fill': '#000000a0'\r\n        },\r\n        background: {\r\n          fill: '#ffffffb0'\r\n        }\r\n      },\r\n      xPadding: 10\r\n    },\r\n    dependencyLines: {\r\n      style: {\r\n        'fill': 'transparent',\r\n        'stroke': '#FFa00090',\r\n        'stroke-width': 2\r\n      }\r\n    },\r\n    progress: {\r\n      width: 20,\r\n      height: 6,\r\n      styles: {\r\n        line: {\r\n          'stroke': '#ffffff85',\r\n          'stroke-width': 20\r\n        },\r\n        bar: {\r\n          'fill': \"url(#diagonalHatch)\",\r\n          'transform': 'translateY(0.1) scaleY(0.8)'\r\n        }\r\n      }\r\n    },\r\n    grid: {\r\n      horizontal: {\r\n        gap: 6,\r\n        style: {\r\n          stroke: '#00000010',\r\n          strokeWidth: 1\r\n        },\r\n        lines: []\r\n      },\r\n      vertical: {\r\n        strokeWidth: 1,\r\n        style: {\r\n          stroke: '#00000010',\r\n          strokeWidth: 1\r\n        },\r\n        lines: []\r\n      },\r\n      timeLine: {\r\n        style: {\r\n          stroke: '#FF000080',\r\n          strokeWidth: 1\r\n        }\r\n      }\r\n    },\r\n    info: {\r\n      style: 'fill:#000000a0',\r\n      textStyle: 'fill:#fff',\r\n      fontFamily: 'sans-serif',\r\n      fontSize: '12px',\r\n      fontWeight: 'bold',\r\n      display: false\r\n    },\r\n    taskList: {\r\n      display: true,\r\n      styles: {\r\n        row: {\r\n          'background': 'transparent',\r\n          'border-color': '#00000010'\r\n        },\r\n        column: {\r\n          'border-color': '#00000010',\r\n          'height': 0,\r\n          'width': 0,\r\n          'line-height': 0\r\n        },\r\n        header: {\r\n          'background': '#f0f0f0',\r\n          'border-color': '#00000010'\r\n        },\r\n        label: {\r\n          'display': 'inline-flex',\r\n          'margin': 'auto 6px',\r\n          'color': '#404040'\r\n        },\r\n        value: {\r\n          'margin': 'auto 6px',\r\n          'overflow': 'hidden',\r\n          'text-overflow': 'ellipsis',\r\n          'line-height': '1.5em',\r\n          'word-break': 'keep-all',\r\n          'font-family': 'sans-serif',\r\n          'font-size': '12px',\r\n          'white-space': 'nowrap',\r\n          'color': '#606060'\r\n        },\r\n        expander: {\r\n          wrapper: {\r\n            stroke: '#909090',\r\n            strokeWidth: 1,\r\n            fill: '#ffffffa0',\r\n            display: 'flex'\r\n          },\r\n          content: {\r\n            display: 'inline-flex',\r\n            cursor: 'pointer',\r\n            margin: 'auto 0px'\r\n          }\r\n        }\r\n      },\r\n      columns: [{\r\n        id: 0,\r\n        label: 'ID',\r\n        value: 'id',\r\n        width: 40,\r\n        styles: {\r\n          label: {}\r\n        }\r\n      }],\r\n      resizerWidth: 0,\r\n      percent: 100,\r\n      width: 0,\r\n      finalWidth: 0,\r\n      expander: {\r\n        size: 16,\r\n        columnWidth: 24,\r\n        padding: 16,\r\n        margin: 10\r\n      }\r\n    },\r\n    calendar: {\r\n      hours: [],\r\n      days: [],\r\n      months: [],\r\n      gap: 6,\r\n      height: 0,\r\n      styles: {\r\n        wrapper: {\r\n          'width': '100%',\r\n          'height': '100%',\r\n          'background': '#f0f0f0',\r\n          'border-color': '#00000010'\r\n        },\r\n        row: {\r\n          fill: 'transparent',\r\n          stroke: '#00000010'\r\n        },\r\n        column: {\r\n          'stroke': '#00000010',\r\n          'stroke-width': 1,\r\n          'fill': 'transparent'\r\n        },\r\n        text: {\r\n          fontFamily: 'sans-serif',\r\n          'fill': '#404040'\r\n        }\r\n      },\r\n      hour: {\r\n        height: 20,\r\n        display: true,\r\n        fontSize: '12px',\r\n        format: {\r\n          short(date) {\r\n            return dayjs(date).locale(userOptions.locale.code).format('HH');\r\n          },\r\n          medium(date) {\r\n            return dayjs(date).locale(userOptions.locale.code).format('HH:mm');\r\n          },\r\n          long(date) {\r\n            return dayjs(date).locale(userOptions.locale.code).format('HH:mm');\r\n          }\r\n        }\r\n      },\r\n      day: {\r\n        height: 20,\r\n        display: true,\r\n        fontSize: '12px',\r\n        format: {\r\n          short(date) {\r\n            return dayjs(date).locale(userOptions.locale.code).format('DD');\r\n          },\r\n          medium(date) {\r\n            return dayjs(date).locale(userOptions.locale.code).format('DD ddd');\r\n          },\r\n          long(date) {\r\n            return dayjs(date).locale(userOptions.locale.code).format('DD dddd');\r\n          }\r\n        }\r\n      },\r\n      month: {\r\n        height: 20,\r\n        display: true,\r\n        fontSize: '12px',\r\n        format: {\r\n          short(date) {\r\n            return dayjs(date).locale(userOptions.locale.code).format('MM');\r\n          },\r\n          medium(date) {\r\n            return dayjs(date).locale(userOptions.locale.code).format('\\'YY MMM');\r\n          },\r\n          long(date) {\r\n            return dayjs(date).locale(userOptions.locale.code).format('YYYY MMMM (MM)');\r\n          }\r\n        }\r\n      }\r\n    },\r\n    defs: []\r\n  };\r\n}\r\n\r\nimport Main from './components/Main.vue';\r\n\r\nexport default {\r\n  components: {\r\n    'elastigantt-main': Main,\r\n  },\r\n  props: [\r\n    'tasks', 'options'\r\n  ],\r\n  provide() {\r\n    const provider = {};\r\n    const self = this;\r\n    Object.defineProperty(provider, 'root', {\r\n      enumerable: true,\r\n      get: () => self\r\n    });\r\n    return provider;\r\n  },\r\n  data() {\r\n    return {\r\n      state: {}\r\n    };\r\n  },\r\n  methods: {\r\n    isObject(item) {\r\n      return item && typeof item === 'object' && !Array.isArray(item);\r\n    },\r\n    mergeDeep(target, ...sources) {\r\n      if (!sources.length) {\r\n        return target;\r\n      }\r\n      const source = sources.shift();\r\n      if (this.isObject(target) && this.isObject(source)) {\r\n        for (const key in source) {\r\n          if (this.isObject(source[key])) {\r\n            if (!target[key])\r\n              Object.assign(target, {\r\n                [key]: {}\r\n              });\r\n            this.mergeDeep(target[key], source[key]);\r\n          } else {\r\n            Object.assign(target, {\r\n              [key]: source[key]\r\n            });\r\n          }\r\n        }\r\n      }\r\n      return this.mergeDeep(target, ...sources);\r\n    },\r\n    getScrollBarHeight() {\r\n      const outer = document.createElement(\"div\");\r\n      outer.style.visibility = \"hidden\";\r\n      outer.style.height = \"100px\";\r\n      outer.style.msOverflowStyle = \"scrollbar\";\r\n      document.body.appendChild(outer);\r\n      var noScroll = outer.offsetHeight;\r\n      outer.style.overflow = \"scroll\";\r\n      var inner = document.createElement(\"div\");\r\n      inner.style.height = \"100%\";\r\n      outer.appendChild(inner);\r\n      var withScroll = inner.offsetHeight;\r\n      outer.parentNode.removeChild(outer);\r\n      return noScroll - withScroll;\r\n    },\r\n    initialize() {\r\n      this.state = this.mergeDeep({}, getOptions(this.options), this.options, {\r\n        tasks: this.tasks.map(task => this.mergeDeep({}, task))\r\n      });\r\n      dayjs.locale(options.locale, null, true);\r\n      this.state.taskList.columns = this.state.taskList.columns.map((column, index) => {\r\n        column.finalWidth = (column.width / 100) * this.state.taskList.percent;\r\n        column.styles = this.mergeDeep({}, this.state.taskList.styles, column.styles);\r\n        if (typeof column.style === 'undefined') {\r\n          column.style = {\r\n            'height': 0 + \"px\",\r\n            'line-height': 0 + \"px\",\r\n            'width': 0 + \"px\"\r\n          };\r\n        }\r\n        column.style = this.mergeDeep({}, this.state.taskList.styles.column, column.style);\r\n        if (typeof column.height === 'undefined') {\r\n          column.height = 0;\r\n        }\r\n        column._id = `${index}-${column.label}`;\r\n        return this.mergeDeep({}, column);\r\n      });\r\n      // initialize observer\r\n      this.state.tasks = this.state.tasks.map(task => {\r\n        task.x = 0;\r\n        task.y = 0;\r\n        task.width = 0;\r\n        task.height = 0;\r\n        task.tooltip = {\r\n          visible: false\r\n        };\r\n        task.mouseOver = false;\r\n        task.dependencyLines = [];\r\n        if (typeof task.visible === 'undefined') {\r\n          task.visible = true;\r\n        }\r\n        if (typeof task.collapsed === 'undefined') {\r\n          task.collapsed = false;\r\n        }\r\n        if (typeof task.dependencyLines === 'undefined') {\r\n          task.dependencyLines = [];\r\n        }\r\n        if (typeof task.dependentOn === 'undefined') {\r\n          task.dependentOn = [];\r\n        }\r\n        if (typeof task.parentId === 'undefined') {\r\n          task.parentId = null;\r\n        }\r\n        task.children = [];\r\n        task.allChildren = [];\r\n        task.parents = [];\r\n        task.parent = null;\r\n        task.durationMs = 0;\r\n        return this.mergeDeep({}, task);\r\n      });\r\n      this.state.rootTask = {\r\n        id: null,\r\n        label: 'root',\r\n        children: [],\r\n        allChildren: [],\r\n        parents: [],\r\n        parent: null\r\n      };\r\n      this.resetTaskTree();\r\n      this.state.taskTree = this.makeTaskTree(this.state.rootTask);\r\n      this.state.tasks = this.state.taskTree.allChildren;\r\n      this.state.ctx = document.createElement('canvas').getContext('2d');\r\n      this.calculateTaskListColumnsWidths();\r\n      this.state.scrollBarHeight = this.getScrollBarHeight();\r\n      this.state.outerHeight = this.state.height + this.state.scrollBarHeight;\r\n    },\r\n    calculateCalendarDimensions() {\r\n      this.state.calendar.height = 0;\r\n      if (this.state.calendar.hour.display) {\r\n        this.state.calendar.height += this.state.calendar.hour.height;\r\n      }\r\n      if (this.state.calendar.day.display) {\r\n        this.state.calendar.height += this.state.calendar.day.height;\r\n      }\r\n      if (this.state.calendar.month.display) {\r\n        this.state.calendar.height += this.state.calendar.month.height;\r\n      }\r\n    },\r\n    getMaximalLevel() {\r\n      let maximalLevel = 0;\r\n      this.state.tasks.forEach(task => {\r\n        if (task.parents.length > maximalLevel) {\r\n          maximalLevel = task.parents.length;\r\n        }\r\n      });\r\n      return maximalLevel - 1;\r\n    },\r\n    getMaximalExpanderWidth() {\r\n      return this.getMaximalLevel() * this.state.taskList.expander.padding + this.state.taskList.expander.margin;\r\n    },\r\n    calculateTaskListColumnsWidths() {\r\n      let final = 0;\r\n      this.state.taskList.columns.forEach(column => {\r\n        if (column.expander) {\r\n          column.finalWidth = (this.getMaximalExpanderWidth() + column.width) / 100 * this.state.taskList.percent;\r\n        } else {\r\n          column.finalWidth = (column.width / 100) * this.state.taskList.percent;\r\n        }\r\n        final += column.finalWidth;\r\n        let height = this.state.row.height + this.state.grid.horizontal.gap * 2 - this.state.grid.horizontal.strokeWidth;\r\n        column.style.height = height + \"px\";\r\n        column.style['line-height'] = height + \"px\";\r\n        column.style.width = column.finalWidth + \"px\";\r\n      });\r\n      this.state.taskList.finalWidth = final;\r\n    },\r\n    resetTaskTree() {\r\n      this.state.rootTask.children = [];\r\n      this.state.rootTask.allChildren = [];\r\n      this.state.rootTask.parent = null;\r\n      this.state.rootTask.parents = [];\r\n      for (let i = 0, len = this.state.tasks.length; i < len; i++) {\r\n        let current = this.state.tasks[i];\r\n        current.children = [];\r\n        current.allChildren = [];\r\n        current.parent = null;\r\n        current.parents = [];\r\n      }\r\n    },\r\n    makeTaskTree(task) {\r\n      for (let i = 0, len = this.state.tasks.length; i < len; i++) {\r\n        let current = this.state.tasks[i];\r\n        if (current.parentId === task.id) {\r\n          if (task.parents.length) {\r\n            task.parents.forEach(parent => current.parents.push(parent));\r\n          }\r\n          if (task !== this.root) {\r\n            current.parents.push(task);\r\n            current.parent = task;\r\n          } else {\r\n            current.parents = [];\r\n            current.parent = null;\r\n          }\r\n          current = this.makeTaskTree(current);\r\n          task.allChildren.push(current);\r\n          task.children.push(current);\r\n          current.allChildren.forEach(child => task.allChildren.push(child));\r\n        }\r\n      }\r\n      return task;\r\n    },\r\n    getTask(taskId) {\r\n      return this.tasksById[taskId];\r\n    },\r\n    getChildren(taskId) {\r\n      return this.state.tasks.filter(task => task.parent === taskId);\r\n    },\r\n    getSVG() {\r\n      return this.state.svgMain.outerHTML;\r\n    },\r\n    getImage(type = 'image/png') {\r\n      return new Promise((resolve, reject) => {\r\n        const img = new Image();\r\n        img.onload = () => {\r\n          const canvas = document.createElement('canvas');\r\n          canvas.width = this.state.svgMain.clientWidth;\r\n          canvas.height = this.state.svgMain.clientHeight;\r\n          canvas.getContext('2d').drawImage(img, 0, 0);\r\n          resolve(canvas.toDataURL(type));\r\n        };\r\n        img.src = 'data:image/svg+xml,' + encodeURIComponent(this.getSVG());\r\n      });\r\n    },\r\n    getHeight(visibleTasks, outer = false) {\r\n      let height = visibleTasks.length * (this.state.row.height + this.state.grid.horizontal.gap * 2) + this.state.calendar.height + this.state.calendar.styles.column['stroke-width'] * 2 + this.state.calendar.gap;\r\n      if (outer) {\r\n        height += this.state.scrollBarHeight;\r\n      }\r\n      return height;\r\n    },\r\n    timeToPixelOffsetX(ms) {\r\n      let x = ms - this.state.times.firstTime;\r\n      if (x) {\r\n        x = x / this.state.times.timePerPixel;\r\n      }\r\n      return x;\r\n    },\r\n    pixelOffsetXToTime(pixelOffsetX) {\r\n      let offset = pixelOffsetX - this.state.grid.vertical.style.strokeWidth;\r\n      return offset * this.state.times.timePerPixel + this.state.times.firstTime;\r\n    },\r\n    onScrollTree(ev) {\r\n      this._onScrollTree(ev.target.scrollLeft, ev.target.scrollTop);\r\n    },\r\n    _onScrollTree(left, top) {\r\n      const treeContainerWidth = this.state.svgTreeContainer.clientWidth;\r\n      this.state.scroll.tree.left = left;\r\n      this.state.scroll.tree.right = left + treeContainerWidth;\r\n      this.state.scroll.tree.top = top;\r\n      this.state.scroll.tree.time = this.pixelOffsetXToTime(left);\r\n      this.state.scroll.tree.dateTime.left = new Date(this.state.scroll.tree.time).toDateString();\r\n      this.state.scroll.tree.dateTime.right = new Date(this.pixelOffsetXToTime(left + this.state.svgTree.clientWidth)).toDateString();\r\n    },\r\n    scrollToTime(time) {\r\n      let pos = this.timeToPixelOffsetX(time);\r\n      const treeContainerWidth = this.state.svgTreeContainer.clientWidth;\r\n      pos = pos - (treeContainerWidth / 2);\r\n      if (pos > this.state.width) {\r\n        pos = this.state.width - treeContainerWidth;\r\n      }\r\n      this.state.svgTreeContainer.scrollLeft = pos;\r\n    },\r\n    onWheelTree(ev) {\r\n      //this.state.times.timeScale += ev.deltaY * 10;\r\n    },\r\n    initializeEvents() {\r\n      this.$on('scroll.tree', this.onScrollTree);\r\n      this.$on('wheel.tree', this.onWheelTree);\r\n    }\r\n  },\r\n  computed: {\r\n    visibleTasks() {\r\n      const firstDate = this.state.times.firstTaskDate.toISOString().split('T')[0] + 'T00:00:00';\r\n      const lastDate = this.state.times.lastTaskDate.toISOString().split('T')[0] + 'T23:59:59.999';\r\n      this.state.times.firstDate = dayjs(firstDate).locale(this.locale).subtract(this.state.scope.before, 'days').toDate();\r\n      this.state.times.lastDate = dayjs(lastDate).locale(this.locale).add(this.state.scope.after, 'days').toDate();\r\n      this.state.times.firstTime = this.state.times.firstDate.getTime();\r\n      this.state.times.lastTime = this.state.times.lastDate.getTime();\r\n      this.state.times.totalViewDurationMs = this.state.times.lastTime - this.state.times.firstTime;\r\n      this.state.taskList.width = this.state.taskList.columns.reduce((prev, current) => {\r\n        return {\r\n          width: prev.width + current.width\r\n        };\r\n      }, {\r\n        width: 0\r\n      }).width;\r\n      let max = this.state.times.timeScale * 60;\r\n      let min = this.state.times.timeScale;\r\n      let steps = max / min;\r\n      let percent = this.state.times.timeZoom / 100;\r\n      this.state.times.timePerPixel = this.state.times.timeScale * steps * percent + Math.pow(2, this.state.times.timeZoom);\r\n      this.state.times.totalViewDurationPx = this.state.times.totalViewDurationMs / this.state.times.timePerPixel;\r\n      this.state.times.stepPx = this.state.times.stepMs / this.state.times.timePerPixel;\r\n      this.state.width = this.state.times.totalViewDurationPx + this.state.grid.vertical.style.strokeWidth;\r\n      this.state.times.steps = Math.ceil(this.state.times.totalViewDurationPx / this.state.times.stepPx);\r\n      this.calculateCalendarDimensions();\r\n      this.resetTaskTree();\r\n      this.state.tasks = this.makeTaskTree(this.state.rootTask).allChildren;\r\n      const visibleTasks = this.state.tasks.filter(task => task.visible);\r\n      this.state.height = this.getHeight(visibleTasks);\r\n      this.state.outerHeight = this.getHeight(visibleTasks, true);\r\n      for (let index = 0, len = visibleTasks.length; index < len; index++) {\r\n        let task = visibleTasks[index];\r\n        task.width = task.durationMs / this.state.times.timePerPixel - this.state.grid.vertical.style.strokeWidth;\r\n        if (task.width < 0) {\r\n          task.width = 0;\r\n        }\r\n        task.height = this.state.row.height;\r\n        task.x = this.timeToPixelOffsetX(task.startTime);\r\n        task.y = (this.state.row.height + this.state.grid.horizontal.gap * 2) * index + this.state.grid.horizontal.gap + this.state.calendar.height + this.state.calendar.styles.column['stroke-width'] + this.state.calendar.gap;\r\n        task.inViewPort = (task.x + task.width >= this.state.scroll.tree.left && task.x <= this.state.scroll.tree.right) || (task.x <= this.state.scroll.tree.left && task.x + task.width >= this.state.scroll.tree.right);\r\n      }\r\n      return visibleTasks;\r\n    },\r\n\r\n  },\r\n  created() {\r\n    this.initialize();\r\n    this.initializeEvents();\r\n    this.tasksById = {};\r\n    this.state.tasks.forEach(task => (this.tasksById[task.id] = task));\r\n    let tasks = this.state.tasks;\r\n    let firstTaskTime = Number.MAX_SAFE_INTEGER;\r\n    let lastTaskTime = 0;\r\n    let firstTaskDate,\r\n      lastTaskDate;\r\n    for (let index = 0, len = this.state.tasks.length; index < len; index++) {\r\n      let task = this.state.tasks[index];\r\n      task.startDate = new Date(task.start);\r\n      task.startTime = task.startDate.getTime();\r\n      task.durationMs = task.duration * 1000;\r\n      if (task.startTime < firstTaskTime) {\r\n        firstTaskTime = task.startTime;\r\n        firstTaskDate = task.startDate;\r\n      }\r\n      if (task.startTime + task.durationMs > lastTaskTime) {\r\n        lastTaskTime = task.startTime + task.durationMs;\r\n        lastTaskDate = new Date(task.startTime + task.durationMs);\r\n      }\r\n    }\r\n    this.state.times.firstTaskTime = firstTaskTime;\r\n    this.state.times.lastTaskTime = lastTaskTime;\r\n    this.state.times.firstTaskDate = firstTaskDate;\r\n    this.state.times.lastTaskDate = lastTaskDate;\r\n  },\r\n  mounted() {\r\n    this.$nextTick(() => {\r\n      this.$emit('recenterPosition');\r\n    })\r\n  }\r\n}\n</script>\r\n","import Elastigantt from './Elastigantt.vue';\r\nVue.component('elastigantt', Elastigantt);\r\nexport default Elastigantt;\r\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAaA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;;EAnEA,YAAY;EACZ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;;EAhBA,YAAY;EACZ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC+BA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;;EA3FA,YAAY;EACZ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACSA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;;EAhEA,YAAY;EACZ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACGA;EACA;EACA;EACA;EACA;EACA;EACA;;;EAVA,YAAY;EACZ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACOA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;;EAlBA,YAAY;EACZ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACWA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;;EAtDA,YAAY;EACZ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACIA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;;EAlFA,YAAY;EACZ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACQA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;;EA7BA,YAAY;EACZ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACQA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,SACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;;EAtPA,YAAY;EACZ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACKA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;;;;;;;;EAQA;EACA;EACA;;;;;EAKA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;;EAvEA,YAAY;EACZ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACGA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;;EAlBA,YAAY;EACZ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACQA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;;;EA/BA,YAAY;EACZ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACSA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;;EA/BA,YAAY;EACZ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACsBA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACA,EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;;EA7DA,YAAY;EACZ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACwBA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;;;;;EAMA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;;EArEA,YAAY;EACZ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACsBA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;;;;;;;;;;;EAYA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;;EApFA,YAAY;EACZ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACmBA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;;EA3CA,YAAY;EACZ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACyBA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;;EA3FA,YAAY;EACZ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ECCA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;AAIA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;;EA3nBA,YAAY;EACZ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ECHA,GAAG,CAAC,SAAS,CAAC,aAAa,EAAE,WAAW,CAAC,CAAC;;;;;;;;"}