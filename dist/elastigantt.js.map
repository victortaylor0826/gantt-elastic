{"version":3,"file":"elastigantt.js","sources":["../src/components/Header.vue","../src/components/TaskList/Resizer.vue","../src/components/TaskList/Expander.vue","../src/components/TaskList/TaskListHeader.vue","../src/components/TaskList/TaskListItem.vue","../src/components/TaskList/TaskList.vue","../src/components/Grid/Grid.vue","../src/components/Calendar/CalendarRow.vue","../src/components/Calendar/Calendar.vue","../src/components/Tree/DependencyLines.vue","../src/components/Tree/Text.vue","../src/components/Tree/Info.vue","../src/components/Tree/ProgressBar.vue","../src/components/Tree/Row/Task.vue","../src/components/Tree/Row/Milestone.vue","../src/components/Tree/Row/Project.vue","../src/components/Tree/Tree.vue","../src/components/Main.vue","../src/components/Grid/GridHeader.vue","../src/Elastigantt.vue","../src/index.js"],"sourcesContent":["<template>\n<div class=\"elastigantt__header\">\n  <input type=\"range\" v-model=\"scale\" max=\"24\" min=\"2\">\n  <input type=\"range\" v-model=\"height\" max=\"100\" min=\"6\">\n  <input type=\"range\" v-model=\"scope\" max=\"100\" min=\"0\">\n  <input type=\"range\" v-model=\"divider\" max=\"100\" min=\"0\">\n  <input type=\"checkbox\" v-model=\"root.state.taskList.display\">\n</div>\n</template>\n<script>\nexport default {\n  inject: ['root'],\n  data() {\n    return {};\n  },\n  computed: {\n    scale: {\n      get() {\n        return this.root.state.times.timeZoom;\n      },\n      set(value) {\n        this.root.state.times.timeZoom = Number(value);\n        this.root.recalculate();\n      }\n    },\n    height: {\n      get() {\n        return this.root.state.row.height;\n      },\n      set(value) {\n        this.root.state.row.height = Number(value);\n        this.root.recalculate();\n      }\n    },\n    scope: {\n      get() {\n        return this.root.state.scope.before;\n      },\n      set(value) {\n        this.root.state.scope.before = Number(value);\n        this.root.state.scope.after = Number(value);\n        this.root.recalculate();\n      }\n    },\n    divider: {\n      get() {\n        return this.root.state.taskList.percent;\n      },\n      set(value) {\n        this.root.state.taskList.percent = Number(value);\n        this.root.recalculate();\n      }\n    }\n  }\n}\n</script>\n","<template>\n<div class=\"elastigantt__task-list-resizer\" style=\"getStyle\"></div>\n</template>\r\n<script>\nexport default {\r\n  data() {\r\n    return {};\r\n  },\r\n  computed: {\r\n    getStyle() {\r\n      const state = this.root.state;\r\n      return {\r\n        height: '100%',\r\n        width: root.state.taskList.resizerWidth + 'px'\r\n      };\r\n    }\r\n  }\r\n}\n</script>\r\n","<template>\n<svg :width=\"root.state.taskList.expander.size\" :height=\"root.state.taskList.expander.size\">\n  <rect\n    :x=\"border\"\n    :y=\"border\"\n    :width=\"root.state.taskList.expander.size-border*2\"\n    :height=\"root.state.taskList.expander.size-border*2\"\n    rx=\"2\"\n    ry=\"2\"\n    :style=\"root.state.taskList.styles.expander\"\n    @click=\"toggle\">\n  </rect>\n  <line v-if=\"allChildren.length\"\n    :x1=\"lineOffset\"\n    :y1=\"root.state.taskList.expander.size/2\"\n    :x2=\"root.state.taskList.expander.size-lineOffset\"\n    :y2=\"root.state.taskList.expander.size/2\"\n    :style=\"lineStyle\"\n    @click=\"toggle\">\n  </line>\n  <line v-if=\"collapsed\"\n    :x1=\"root.state.taskList.expander.size/2\"\n    :y1=\"lineOffset\"\n    :x2=\"root.state.taskList.expander.size/2\"\n    :y2=\"root.state.taskList.expander.size-lineOffset\"\n    :style=\"lineStyle\"\n    @click=\"toggle\">\n  </line>\n</svg>\n</template>\n\n<script>\nexport default {\n  inject: ['root'],\n  props: ['tasks'],\n  data() {\n    const border = 0.5;\n    return {\n      border,\n      borderStyle: {\n        'fill': '#ffffffa0',\n        'stroke': '#000000',\n        'stroke-width': border\n      },\n      lineOffset: 5,\n      lineStyle: {\n        'fill': 'transparent',\n        'stroke': '#000000',\n        'stroke-width': 1,\n        'stroke-linecap': 'round'\n      }\n    };\n  },\n  computed: {\n    allChildren() {\n      const children = [];\n      this.tasks.forEach(task => {\n        task.allChildren.forEach(child => {\n          children.push(child);\n        });\n      });\n      return children;\n    },\n    collapsed() {\n      if (this.tasks.length === 0) {\n        return false;\n      }\n      let collapsed = 0;\n      for (let i = 0, len = this.tasks.length; i < len; i++) {\n        if (this.tasks[i].collapsed) {\n          collapsed++;\n        }\n      }\n      return collapsed === this.tasks.length;\n    }\n  },\n  methods: {\n    toggle() {\n      if (this.allChildren.length === 0) {\n        return;\n      }\n      const collapsed = !this.collapsed;\n      this.tasks.forEach(task => {\n        task.collapsed = collapsed;\n        task.allChildren.forEach(child => {\n          let parentsNotCollapsed = child.parents.filter(parent => parent.collapsed === false).length === child.parents.length;\n          child.visible = !collapsed && parentsNotCollapsed;\n        });\n      });\n    }\n  }\n}\n</script>\n","<template>\n<div class=\"elastigantt__task-list-header\">\n  <div class=\"elastigantt__task-list-header-column elastigantt__task-list-header-column--expander\" :style=\"expanderStyle\">\n    <task-list-expander :tasks=\"collapsible\"></task-list-expander>\n  </div>\n  <div class=\"elastigantt__task-list-header-column\" v-for=\"column in root.state.taskList.columns\" :key=\"column.label\" :style=\"getStyle(column)\">\n    <div class=\"elastigantt__task-list-header-label\" :style=\"column.styles.label\" :column=\"column\" @mouseup=\"resizerMouseUp($event, column)\">{{column.label}}</div>\n    <div class=\"elastigantt__task-list-header-resizer\" :column=\"column\" @mousedown=\"resizerMouseDown($event, column)\"></div>\n  </div>\n</div>\n</template>\n\n<script>\nimport TaskListExpander from './Expander.vue';\n\nexport default {\n  components: {\n    'task-list-expander': TaskListExpander,\n  },\n  inject: ['root'],\n  props: ['expanderStyle'],\n  data() {\n    return {\n      resizer: {\n        moving: false,\n        x: 0\n      }\n    };\n  },\n  computed: {\n    getStyle() {\n      return column => {\n        const state = this.root.state;\n        return Object.assign({\n          'height': (state.calendar.height + state.calendar.styles.column['stroke-width']) + 'px',\n          'margin-bottom': state.calendar.gap + 'px',\n          'width': column.finalWidth + 'px'\n        }, state.taskList.styles.header);\n      }\n    },\n    collapsible() {\n      return this.root.state.tasks.filter(task => task.allChildren.length > 0);\n    }\n  },\n  methods: {\n    resizerMouseDown(event, column) {\n      if (!this.resizerMoving) {\n        this.resizer.moving = column;\n        this.resizer.x = event.clientX;\n        this.resizer.initialWidth = column.width;\n      }\n    },\n    resizerMouseMove(event, column) {\n      if (this.resizer.moving) {\n        this.resizer.moving.width = this.resizer.initialWidth + event.clientX - this.resizer.x;\n        this.root.calculateTaskListColumnWidths();\n      }\n    },\n    resizerMouseUp(event, column) {\n      this.resizer.moving = false;\n    }\n  },\n  created() {\n    this.root.$on('mousemove', this.resizerMouseMove);\n    this.root.$on('mouseup', this.resizerMouseUp);\n  }\n}\n</script>\n","<template>\n<div class=\"elastigantt__task-list-item\" :style=\"root.state.taskList.styles.row\">\n  <div class=\"elastigantt__task-list-item-column elastigantt__task-list-item-column--expander\" :style=\"expanderStyle\">\n    <task-list-expander :tasks=\"[task]\"></task-list-expander>\n  </div>\n  <div class=\"elastigantt__task-list-item-column\" v-for=\"column in root.state.taskList.columns\" :key=\"column.label\" :style=\"getStyle(column)\" :column=\"column\">\n    <div class=\"elastigantt__task-list-item-value\" :style=\"column.styles.value\">{{task[column.value]}}</div>\n  </div>\n</div>\n</template>\n<script>\nimport TaskListExpander from './Expander.vue';\n\nexport default {\n  components: {\n    'task-list-expander': TaskListExpander,\n  },\n  inject: ['root'],\n  props: [\n    \"task\", \"expanderStyle\"\n  ],\n  data() {\n    return {};\n  },\n  computed: {\n    getStyle() {\n      const state = this.root.state;\n      return column => {\n        let height = state.row.height + state.horizontalGrid.gap * 2 - state.horizontalGrid.strokeWidth;\n        return Object.assign({\n          'height': height + \"px\",\n          \"line-height\": height + \"px\",\n          'width': column.finalWidth + \"px\"\n        }, state.taskList.styles.column);\n      };\n    },\n    getContent(column) {\n      return this.task[column.value];\n    }\n  }\n}\n</script>\n","<template>\n<foreignObject class=\"elastigantt__task-list-object\" x=\"0\" y=\"0\" width=\"100%\" height=\"100%\" v-if=\"root.state.taskList.display\">\n  <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"elastigantt__task-list-container\">\n    <div v-html=\"root.state.defs.join('')\"></div>\n    <task-list-resizer></task-list-resizer>\n    <task-list-header :expander-style=\"getHeaderExpanderStyle\"></task-list-header>\n    <task-list-item v-for=\"task in root.getVisibleTasks()\" :key=\"task.id\" :task=\"task\" :expander-style=\"getListExpanderStyle\"></task-list-item>\n  </div>\n</foreignObject>\n</template>\n<script>\nimport TaskListResizer from './Resizer.vue';\nimport TaskListHeader from './TaskListHeader.vue';\nimport TaskListItem from './TaskListItem.vue';\n\nexport default {\n  components: {\n    'task-list-resizer': TaskListResizer,\n    'task-list-header': TaskListHeader,\n    'task-list-item': TaskListItem,\n  },\n  inject: ['root'],\n  data() {\n    return {};\n  },\n  computed: {\n    getHeaderExpanderStyle() {\n      const state = this.root.state;\n      return Object.assign({\n        'width': state.taskList.expander.columnWidth + state.calendar.styles.column['stroke-width'] + 'px',\n        'height': state.calendar.height + state.calendar.styles.column['stroke-width'] + 'px',\n        'margin-bottom': state.calendar.gap + 'px'\n      }, state.taskList.styles.header);\n    },\n    getListExpanderStyle() {\n      const state = this.root.state;\n      let height = state.row.height + (state.horizontalGrid.gap * 2) - state.horizontalGrid.strokeWidth;\n      return {\n        'width': state.taskList.expander.columnWidth + state.calendar.styles.column['stroke-width'] + 'px',\n        'height': height + 'px',\n        'border-color': '#00000010'\n      };\n    }\n  }\n}\n</script>\n","<template>\n<g>\n  <line class=\"elastigantt__grid-horizontal-line\" v-for=\"(line,index) in horizontalLines\" :key=\"line.key\" :x1=\"line.x1\" :y1=\"line.y1\" :x2=\"line.x2\" :y2=\"line.y2\" :style=\"getHStyle\"></line>\n  <line class=\"elastigantt__grid-vertical-line\" v-for=\"(line,index) in verticalLines\" :key=\"line.key\" :x1=\"line.x1\" :y1=\"line.y1\" :x2=\"line.x2\" :y2=\"line.y2\" :style=\"getVStyle\"></line>\n</g>\n</template>\n<script>\nexport default {\n  inject: ['root'],\n  data() {\n    return {};\n  },\n  computed: {\n    getVStyle() {\n      return this.root.state.verticalGrid.style;\n    },\n    getHStyle() {\n      return this.root.state.horizontalGrid.style;\n    },\n    verticalLines() {\n      let lines = [];\n      const state = this.root.state;\n      for (let step = 0; step <= state.times.steps; step++) {\n        let x = step * state.times.stepPx + state.verticalGrid.strokeWidth / 2;\n        lines.push({\n          key: step,\n          x1: x,\n          y1: state.calendar.height + state.calendar.styles.column['stroke-width'] + state.calendar.gap,\n          x2: x,\n          y2: state.calendar.height + state.calendar.styles.column['stroke-width'] + state.calendar.gap + (state.tasks.length * (state.row.height + state.horizontalGrid.gap * 2)) + state.horizontalGrid.strokeWidth\n        });\n      }\n      return state.verticalGrid.lines = lines;\n    },\n    horizontalLines() {\n      let lines = [];\n      const state = this.root.state;\n      let tasks = this.root.getVisibleTasks();\n      for (let index = 0, len = tasks.length; index <= len; index++) {\n        lines.push({\n          key: 'hl' + index,\n          x1: 0,\n          y1: index * (state.row.height + state.horizontalGrid.gap * 2) + state.calendar.height + state.calendar.styles.column['stroke-width'] + state.calendar.gap + state.horizontalGrid.strokeWidth / 2,\n          x2: state.times.steps * state.times.stepPx + state.verticalGrid.strokeWidth,\n          y2: index * (state.row.height + state.horizontalGrid.gap * 2) + state.calendar.height + state.calendar.styles.column['stroke-width'] + state.calendar.gap + state.horizontalGrid.strokeWidth / 2\n        });\n      }\n      return state.horizontalGrid.lines = lines;\n    }\n  }\n}\n</script>\n","<template>\n<g class=\"elastigantt__calendar-row-group\">\n  <rect class=\"elastigantt__calendar-row\" :x=\"item.x\" :y=\"item.y\" :width=\"item.width\" :height=\"item.height\" :style=\"root.state.calendar.styles.row\"></rect>\n  <text\n    :x=\"getTextX\"\n    :y=\"getTextY\"\n    alignment-baseline=\"middle\"\n    text-anchor=\"middle\"\n    :style=\"root.state.calendar.styles.text\">{{item.label}}</text>\n</g>\n</template>\n<script>\nexport default {\n  inject: ['root'],\n  props: ['item'],\n  data() {\n    return {};\n  },\n  computed: {\n    getTextX() {\n      return this.item.x + this.item.width / 2;\n    },\n    getTextY() {\n      return this.item.y + this.item.height / 2;\n    }\n  }\n}\n</script>\n","<template>\n<g class=\"elastigantt__calendar-group\">\n  <foreignObject :x=\"getX\" :y=\"getY\" :width=\"getWidth\" :height=\"root.state.calendar.height\">\n    <div class=\"elastigantt__calendar\" :style=\"root.state.calendar.styles.wrapper\" xmlns=\"http://www.w3.org/1999/xhtml\"></div>\n  </foreignObject>\n  <calendar-row v-for=\"(month,index) in months\" :key=\"month.key\" :item=\"month\"></calendar-row>\n  <calendar-row v-for=\"(day,index) in days\" :key=\"day.key\" :item=\"day\"></calendar-row>\n  <calendar-row v-for=\"(hour,index) in hours\" :key=\"hour.key\" :item=\"hour\"></calendar-row>\n</g>\n</template>\n<script>\nimport CalendarRow from './CalendarRow.vue';\nexport default {\n  components: {\n    'calendar-row': CalendarRow\n  },\n  inject: ['root'],\n  data() {\n    return {\n      cache: {}\n    };\n  },\n  methods: {\n    howManyHoursFit(current = 24, currentRecurrection = 1) {\n      let max = {\n        short: 0,\n        medium: 0,\n        long: 0\n      };\n      const state = this.root.state;\n      state.ctx.font = state.calendar.day.fontSize + ' ' + state.calendar.fontFamily;\n      let firstDate = dayjs(state.times.firstDate);\n      for (let i = 0; i < current; i++) {\n        let currentDate = firstDate.add(i, 'hours').toDate();\n        let textWidth = {\n          short: state.ctx.measureText(state.calendar.hour.format.short(currentDate)).width,\n          medium: state.ctx.measureText(state.calendar.hour.format.medium(currentDate)).width,\n          long: state.ctx.measureText(state.calendar.hour.format.long(currentDate)).width\n        };\n        if (textWidth.short >= max.short) {\n          max.short = textWidth.short;\n        }\n        if (textWidth.medium >= max.medium) {\n          max.medium = textWidth.medium;\n        }\n        if (textWidth.long >= max.long) {\n          max.long = textWidth.long;\n        }\n      }\n      let cellWidth = state.times.stepPx / current - state.calendar.styles.column['stroke-width'] - 2;\n      if (current > 1) {\n        if (max.short > cellWidth) {\n          currentRecurrection++;\n          return this.howManyHoursFit(Math.ceil(current / currentRecurrection), currentRecurrection);\n        }\n      }\n      if (currentRecurrection < 3) {\n        if (max.long <= cellWidth) {\n          return {\n            count: current,\n            type: 'long'\n          };\n        }\n        if (max.medium <= cellWidth) {\n          return {\n            count: current,\n            type: 'medium'\n          };\n        }\n      }\n      if (max.short <= cellWidth && current > 1) {\n        return {\n          count: current,\n          type: 'short'\n        };\n      }\n      return {\n        count: 0,\n        type: 'short'\n      };\n    },\n    howManyDaysFit(current = this.root.state.times.steps, currentRecurrection = 1) {\n      let max = {\n        short: 0,\n        medium: 0,\n        long: 0\n      };\n      const state = this.root.state;\n      state.ctx.font = state.calendar.day.fontSize + ' ' + state.calendar.fontFamily;\n      let firstDate = dayjs(state.times.firstDate);\n      for (let i = 0; i < current; i++) {\n        let currentDate = firstDate.add(i, 'days').toDate();\n        let textWidth = {\n          short: state.ctx.measureText(state.calendar.day.format.short(currentDate)).width,\n          medium: state.ctx.measureText(state.calendar.day.format.medium(currentDate)).width,\n          long: state.ctx.measureText(state.calendar.day.format.long(currentDate)).width\n        };\n        if (textWidth.short >= max.short) {\n          max.short = textWidth.short;\n        }\n        if (textWidth.medium >= max.medium) {\n          max.medium = textWidth.medium;\n        }\n        if (textWidth.long >= max.long) {\n          max.long = textWidth.long;\n        }\n      }\n      let cellWidth = state.times.totalViewDurationPx / current - state.calendar.styles.column['stroke-width'] - 2;\n      if (current > 1) {\n        if (max.short > cellWidth) {\n          currentRecurrection++;\n          return this.howManyDaysFit(Math.ceil(current / currentRecurrection), currentRecurrection);\n        }\n      }\n      if (max.long <= cellWidth) {\n        return {\n          count: current,\n          type: 'long'\n        };\n      }\n      if (max.medium <= cellWidth) {\n        return {\n          count: current,\n          type: 'medium'\n        };\n      }\n      if (max.short <= cellWidth && current > 1) {\n        return {\n          count: current,\n          type: 'short'\n        };\n      }\n      return {\n        cunt: 0,\n        type: 'short'\n      };\n    },\n    hourTextStyle() {\n      return 'font-family:' + this.root.state.calendar.hour.fontFamily + ';font-size:' + this.root.state.calendar.hour.fontSize;\n    },\n    dayTextStyle() {\n      return 'font-family:' + this.root.state.calendar.day.fontFamily + ';font-size:' + this.root.state.calendar.day.fontSize;\n    }\n  },\n  computed: {\n    getX() {\n      return this.root.state.calendar.styles.column['stroke-width'] / 2;\n    },\n    getY() {\n      return this.root.state.calendar.styles.column['stroke-width'] / 2;\n    },\n    getWidth() {\n      return this.root.state.width - this.root.state.calendar.styles.column['stroke-width'];\n    },\n\n    hours() {\n      let hours = [];\n      let hoursCount = this.howManyHoursFit();\n      let hourStep = 24 / hoursCount.count;\n      let state = this.root.state;\n      for (let i = 0, len = state.times.steps * hoursCount.count; i < len; i++) {\n        const date = new Date(state.times.firstTime + i * hourStep * 60 * 60 * 1000);\n        hours.push({\n          key: 'h' + i,\n          x: state.calendar.styles.column['stroke-width'] / 2 + i * state.times.stepPx / hoursCount.count,\n          y: state.calendar.styles.column['stroke-width'] / 2 + state.calendar.day.height + state.calendar.month.height,\n          width: state.times.stepPx / hoursCount.count,\n          height: state.calendar.hour.height,\n          label: state.calendar.hour.format[hoursCount.type](date)\n        });\n      }\n      return state.calendar.hours = hours;\n    },\n    days() {\n      let state = this.root.state;\n      let days = [];\n      let daysCount = this.howManyDaysFit();\n      let dayStep = state.times.steps / daysCount.count;\n      for (let i = 0, len = daysCount.count; i < len; i++) {\n        const date = new Date(state.times.firstTime + i * dayStep * 24 * 60 * 60 * 1000);\n        days.push({\n          key: 'd' + i,\n          x: state.calendar.styles.column['stroke-width'] / 2 + i * state.times.totalViewDurationPx / daysCount.count,\n          y: state.calendar.styles.column['stroke-width'] / 2 + state.calendar.month.height,\n          width: state.times.totalViewDurationPx / daysCount.count,\n          height: state.calendar.day.height,\n          label: state.calendar.day.format[daysCount.type](date)\n        });\n      }\n      return state.calendar.days = days;\n    },\n    months() {\n      let state = this.root.state;\n      let months = [];\n      let firstDate = state.times.firstDate;\n      let lastDate = state.times.lastDate;\n      let steps = state.times.steps;\n      let currentDate = dayjs(state.times.firstDate);\n      let currentMonth = currentDate.month();\n      let currentDays = 0;\n      let monthDays = [];\n      let currentDateObj = {\n        date: currentDate.clone().toDate(),\n        days: 0\n      };\n      for (let i = 0; i < steps; i++) {\n        currentDays++;\n        currentDate = currentDate.clone().add(1, 'days');\n        if (currentDate.month() !== currentMonth) {\n          currentMonth = currentDate.month();\n          currentDateObj.days = currentDays;\n          monthDays.push(currentDateObj);\n          currentDateObj = {\n            date: currentDate.clone().toDate(),\n            days: 0\n          };\n          currentDays = 0;\n        }\n      }\n      if (currentDays) {\n        currentDateObj.days = currentDays;\n        monthDays.push(currentDateObj);\n      }\n      let currentOffset = state.calendar.styles.column['stroke-width'] / 2;\n      for (let i = 0, len = monthDays.length; i < len; i++) {\n        let days = monthDays[i].days;\n        let date = monthDays[i].date;\n        let width = state.times.stepPx * days;\n        let format = 'long';\n        if (state.ctx.measureText(state.calendar.month.format[format](date)).width > width) {\n          format = 'medium';\n          if (state.ctx.measureText(state.calendar.month.format[format](date)).width > width) {\n            format = 'short';\n          }\n        };\n        months.push({\n          key: 'm' + i,\n          x: currentOffset,\n          y: state.calendar.styles.column['stroke-width'] / 2,\n          width: width,\n          height: state.calendar.day.height,\n          label: state.calendar.month.format[format](date)\n        });\n        currentOffset += width;\n      }\n      return state.calendar.months = months;\n    }\n  }\n}\n</script>\n","<template>\n<g class=\"elastigantt__tree-dependency-lines-container\">\n  <g v-for=\"task in dependencyTasks\" :key=\"task.id\" :task=\"task\">\n    <path v-for=\"dependencyLine in task.dependencyLines\" :key=\"dependencyLine.id\" :task=\"task\" :d=\"dependencyLine.points\" :style=\"root.state.dependencyLines.style\">\n    </path>\n  </g>\n</g>\n</template>\n<script>\nexport default {\n  inject: ['root'],\n  props: ['tasks'],\n  data() {\n    return {};\n  },\n  methods: {\n    getPoints(fromTaskId, toTaskId) {\n      const state = this.root.state;\n      const fromTask = this.root.getTask(fromTaskId);\n      const toTask = this.root.getTask(toTaskId);\n      if (!toTask.visible || !fromTask.visible) {\n        return '';\n      }\n      const startX = fromTask.x + fromTask.width;\n      const startY = fromTask.y + fromTask.height / 2;\n      const stopX = toTask.x;\n      const stopY = toTask.y + toTask.height / 2;\n      const distanceX = stopX - startX;\n      let distanceY;\n      let yMultiplier = 1;\n      if (stopY >= startY) {\n        distanceY = stopY - startY;\n      } else {\n        distanceY = startY - stopY;\n        yMultiplier = -1;\n      }\n      const offset = 10;\n      const roundness = 4;\n      const isBefore = distanceX <= offset + roundness;\n      let points = `M ${startX} ${startY}\n          L ${startX + offset},${startY} `;\n      if (isBefore) {\n        points +=\n          `Q ${startX + offset + roundness},${startY} ${startX + offset + roundness},${startY + roundness * yMultiplier}\n            L ${startX + offset + roundness},${startY + (distanceY * yMultiplier) / 2 - (roundness * yMultiplier)}\n            Q ${startX + offset + roundness},${startY + (distanceY * yMultiplier) / 2} ${startX + offset},${startY + (distanceY * yMultiplier) / 2}\n            L ${startX - offset + distanceX},${startY + (distanceY * yMultiplier) / 2}\n            Q ${startX - offset + distanceX - roundness},${startY + (distanceY * yMultiplier) / 2} ${startX - offset + distanceX - roundness},${startY + (distanceY * yMultiplier) / 2 + (roundness * yMultiplier)}\n            L ${startX - offset + distanceX - roundness},${stopY - roundness * yMultiplier}\n            Q ${startX - offset + distanceX - roundness},${stopY} ${startX - offset + distanceX},${stopY}\n            L ${stopX},${stopY}`;\n      } else {\n        points +=\n          `L ${startX + distanceX / 2 - roundness},${startY}\n            Q ${startX + distanceX / 2},${startY} ${startX + distanceX / 2},${startY + roundness * yMultiplier}\n            L ${startX + distanceX / 2},${stopY - roundness * yMultiplier}\n            Q ${startX + distanceX / 2},${stopY} ${startX + distanceX / 2 + roundness},${stopY}\n            L ${stopX},${stopY}`;\n      }\n      return points;\n    }\n  },\n  computed: {\n    dependencyTasks() {\n      return this.tasks.filter(task => typeof task.dependentOn !== 'undefined').map(task => {\n        task.dependencyLines = task.dependentOn.map(id => {\n          return {\n            points: this.getPoints(id, task.id)\n          };\n        });\n        return task;\n      });\n    }\n  }\n}\n</script>\n","<template>\n<svg :x=\"task.x+task.width + root.state.treeText.offset\" :y=\"task.y\" :width=\"getWidth\" :height=\"task.height\">\n  <rect x=\"0\" y=\"0\" width=\"100%\" height=\"100%\" :style=\"root.state.treeText.styles.background\"></rect>\n  <text :x=\"root.state.treeText.xPadding\" y=\"50%\" :style=\"root.state.treeText.styles.text\" alignment-baseline=\"middle\">{{task.label}}</text>\n</svg>\n</template>\n<script>\nexport default {\n  inject: ['root'],\n  props: ['task'],\n  data() {\n    return {};\n  },\n  computed: {\n    getWidth() {\n      const textStyle = this.root.state.treeText.styles.text;\n      this.root.state.ctx.font = `${textStyle['font-weight']} ${textStyle['font-size']} ${textStyle['font-family']}`;\n      const textWidth = this.root.state.ctx.measureText(this.task.label).width;\n      return textWidth + this.root.state.treeText.xPadding * 2;\n    }\n  }\n}\n</script>\n","<template>\n<svg class=\"elastigantt__info\"\r\n    :x=\"getX\"\r\n    :y=\"task.y\"\r\n    :width=\"getWidth\"\r\n    :height=\"root.state.row.height\"\r\n    xmlns=\"http://www.w3.org/2000/svg\">\r\n  <rect x=\"0\" y=\"0\" width=\"100%\" height=\"100%\" :style=\"root.state.info.style\"></rect>\r\n  <text x=\"50%\" y=\"50%\" :style=\"getTextStyle\" text-anchor=\"middle\" alignment-baseline=\"middle\">{{task.label}}</text>\r\n</svg>\n</template>\r\n<script>\nexport default {\r\n  inject: ['root'],\r\n  props: ['task'],\r\n  data() {\r\n    return {};\r\n  },\r\n  computed: {\r\n    getX() {\r\n      const state = this.root.state;\r\n      this.root.state.ctx.font = `${root.state.info.fontWeight} ${root.state.info.fontSize} ${root.state.info.fontFamily}`;\r\n      const textWidth = this.root.state.ctx.measureText(this.task.label).width / 2 + 10;\r\n      return this.task.x + this.task.width / 2 - textWidth;\r\n    },\r\n    getWidth() {\r\n      return this.root.state.ctx.measureText(this.task.label).width + 20;\r\n    },\r\n    getTextStyle() {\r\n      let state = this.root.state;\r\n      return `${root.state.info.textStyle};font-family:${root.state.info.fontFamily};font-size:${\r\n            root.state.info.fontSize};font-weight:${root.state.info.fontWeight};`;\r\n    }\r\n  }\r\n}\n</script>\r\n","<template>\n<g>\n  <defs>\n    <pattern id=\"diagonalHatch\" :width=\"root.state.progress.width\" :height=\"root.state.progress.width\" patternTransform=\"rotate(45 0 0)\" patternUnits=\"userSpaceOnUse\">\n      <line x1=\"0\" y1=\"0\" x2=\"0\" :y2=\"root.state.progress.width\" :style=\"root.state.progress.styles.line\" />\n    </pattern>\n  </defs>\n  <!--<rect id=\"elastigantt__tree-row-progress\" x=\"0\" y=\"0\" height=\"30%\" :width=\"getProgressWidth\" style=\"fill:#00ff92a0\"></rect>-->\n  <rect :x=\"getProgressWidth\" y=\"0\" :width=\"100-task.progress+'%'\" height=\"100%\" :style=\"root.state.progress.styles.bar\"></rect>\n  <path :d=\"getLinePoints\" :style=\"getLineStyle\"></path>\n</g>\n</template>\n<script>\nexport default {\n  inject: ['root'],\n  props: ['task'],\n  data() {\n    return {};\n  },\n  computed: {\n    getProgressWidth() {\n      return this.task.progress + '%';\n    },\n    getLinePoints() {\n      const start = this.task.width / 100 * this.task.progress;\n      return `M ${start} 0 L ${start} ${this.task.height}`;\n    },\n    getLineStyle() {\n      return {\n        stroke: this.root.state.row.styles.bar.stroke + 'a0',\n        'stroke-width': this.root.state.row.styles.bar['stroke-width'] / 2\n      };\n    }\n  }\n}\n</script>\n","<template>\n<g class=\"elastigantt__tree-row-task-group\" @mouseover=\"treeRowMouseOver\" @mouseout=\"treeRowMouseOut\">\n  <svg class=\"elastigantt__tree-row-task\"\n      :x=\"task.x\"\n      :y=\"task.y\"\n      :width=\"task.width\"\n      :height=\"task.height\"\n      @click=\"treeRowClick\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n    <defs>\n      <clipPath id=\"elastigantt__task-clip-path\">\n        <polygon :points=\"getPoints\"></polygon>\n      </clipPath>\n    </defs>\n      <polygon :points=\"getPoints\" :style=\"root.state.row.styles.bar\"></polygon>\n      <tree-progress-bar :task=\"task\" clip-path=\"url(#elastigantt__task-clip-path)\"></tree-progress-bar>\n    </svg>\n  <tree-text :task=\"task\" v-if=\"root.state.row.showText\"></tree-text>\n  <info :task=\"task\" v-if=\"root.state.info.display && task.mouseOver\"></info>\n</g>\n</template>\n<script>\nimport TreeText from '../Text.vue';\nimport Info from '../Info.vue';\nimport ProgressBar from '../ProgressBar.vue';\n\nexport default {\n  components: {\n    'tree-text': TreeText,\n    'info': Info,\n    'tree-progress-bar': ProgressBar\n  },\n  inject: ['root'],\n  props: [\n    'task', 'index'\n  ],\n  data() {\n    return {};\n  },\n  computed: {\n    getViewBox() {\n      return `0 0 ${this.task.width} ${this.task.height}`;\n    },\n    getGroupTransform() {\n      return `translate(${this.task.x} ${this.task.y})`;\n    },\n    getPoints() {\n      const task = this.task;\n      const fifty = this.task.height - this.task.height / 4;\n      const full = this.task.height;\n      const offset = 10;\n      return `0,0 ${task.width},0 ${task.width},${task.height} 0,${task.height}`;\n    }\n  },\n  methods: {\n    treeRowClick() {\n      this.task.tooltip.visible = !this.task.tooltip.visible;\n    },\n    treeRowMouseOver() {\n      this.task.mouseOver = true;\n    },\n    treeRowMouseOut() {\n      this.task.mouseOver = false;\n    }\n  }\n}\n</script>\n","<template>\n<g class=\"elastigantt__tree-row-milestone-group\" @mouseover=\"treeRowMouseOver\" @mouseout=\"treeRowMouseOut\">\n  <svg class=\"elastigantt__tree-row\"\n    :x=\"task.x\"\n    :y=\"task.y\"\n    :width=\"task.width\"\n    :height=\"task.height\"\n    @click=\"treeRowClick\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n  <defs>\n    <clipPath id=\"elastigantt__milestone-clip-path\">\n      <polygon :points=\"getPoints\"></polygon>\n    </clipPath>\n  </defs>\n    <polygon :points=\"getPoints\" :style=\"root.state.row.styles.bar\"></polygon>\n    <tree-progress-bar :task=\"task\" clip-path=\"url(#elastigantt__milestone-clip-path)\">\n    </tree-progress-bar>\n  </svg>\n  <tree-text :task=\"task\" v-if=\"root.state.row.showText\"></tree-text>\n  <info :task=\"task\" v-if=\"root.state.info.display && task.mouseOver\"></info>\n</g>\n</template>\n<script>\nexport default {\n  inject: ['root'],\n  props: [\n    'task', 'index'\n  ],\n  data() {\n    return {};\n  },\n  computed: {\n    getViewBox() {\n      return `0 0 ${this.task.width} ${this.task.height}`;\n    },\n    getGroupTransform() {\n      return `translate(${this.task.x} ${this.task.y})`;\n    },\n    getPoints() {\n      const task = this.task;\n      const fifty = task.height / 2;\n      let offset = fifty;\n      if (task.width / 2 - offset < 0) {\n        offset = task.width / 2;\n      }\n      return `0,${fifty}\n        ${offset},0\n        ${task.width - offset},0\n        ${task.width},${fifty}\n        ${task.width - offset},${task.height}\n        ${offset},${task.height}`;\n    }\n  },\n  methods: {\n    treeRowClick() {\n      this.task.tooltip.visible = !this.task.tooltip.visible;\n    },\n    treeRowMouseOver() {\n      this.task.mouseOver = true;\n    },\n    treeRowMouseOut() {\n      this.task.mouseOver = false;\n    }\n  }\n}\n</script>\n","<template>\n<g class=\"elastigantt__tree-row-project-group\" @mouseover=\"treeRowMouseOver\" @mouseout=\"treeRowMouseOut\">\n  <svg class=\"elastigantt__tree-row\"\n      :x=\"task.x\"\n      :y=\"task.y\"\n      :width=\"task.width\"\n      :height=\"task.height\"\n      @click=\"treeRowClick\"\n      xmlns=\"http://www.w3.org/2000/svg\">\n    <defs>\n      <clipPath id=\"elastigantt__project-clip-path\">\n        <path :d=\"getPoints\" :style=\"root.state.row.styles.bar\"></path>\n      </clipPath>\n    </defs>\n    <path :d=\"getPoints\" :style=\"root.state.row.styles.bar\"></path>\n    <tree-progress-bar :task=\"task\" clip-path=\"url(#elastigantt__project-clip-path)\"></tree-progress-bar>\n  </svg>\n  <tree-text :task=\"task\" v-if=\"root.state.row.showText\"></tree-text>\n  <info :task=\"task\" v-if=\"root.state.info.display && task.mouseOver\"></info>\n</g>\n</template>\n<script>\nexport default {\n  inject: ['root'],\n  props: [\n    'task', 'index'\n  ],\n  data() {\n    return {};\n  },\n  computed: {\n    getViewBox() {\n      return `0 0 ${this.task.width} ${this.task.height}`;\n    },\n    getGroupTransform() {\n      return `translate(${this.task.x} ${this.task.y})`;\n    },\n    getPoints() {\n      const task = this.task;\n      const fifty = task.height / 2;\n      let offset = fifty;\n      if (task.width / 2 - offset < 0) {\n        offset = task.width / 2;\n      }\n      const bottom = task.height - task.height / 4;\n      const corner = task.height / 6;\n      const smallCorner = task.height / 8;\n      return `M ${smallCorner},0\n                L ${task.width - smallCorner} 0\n                L ${task.width} ${smallCorner}\n                L ${task.width} ${bottom}\n                L ${task.width - corner} ${task.height}\n                L ${task.width - corner * 2} ${bottom}\n                L ${corner * 2} ${bottom}\n                L ${corner} ${task.height}\n                L 0 ${bottom}\n                L 0 ${smallCorner}\n                Z\n        `;\n      // return `M ${offset} ${task.height}\n      // Q 0 ${task.height} 0 ${fifty}\n      // Q 0 0 ${offset} 0\n      // L ${task.width - offset} 0\n      // Q ${task.width} 0 ${task.width} ${fifty}\n      // Q ${task.width} ${task.height} ${task.width - offset} ${task.height}\n      // L ${offset} ${task.height}\n      // Z`;\n    }\n  },\n  methods: {\n    treeRowClick() {\n      this.task.tooltip.visible = !this.task.tooltip.visible;\n    },\n    treeRowMouseOver() {\n      this.task.mouseOver = true;\n    },\n    treeRowMouseOut() {\n      this.task.mouseOver = false;\n    }\n  }\n}\n</script>\n","<template>\n<svg class=\"elastigantt_tree-object\"\n    x=\"0\"\n    y=\"0\"\n    :width=\"getWidth\"\n    :height=\"getHeight\"\n    xmlns=\"http://www.w3.org/2000/svg\">\n  <calendar></calendar>\n  <grid></grid>\n  <tree-dependency-lines :tasks=\"root.getVisibleTasks()\"></tree-dependency-lines>\n  <g v-for=\"(task, index) in root.getVisibleTasks()\"\n      :task=\"task\"\n      :index=\"index\"\n      :key=\"task.id\">\n    <component :task=\"task\" :index=\"index\" :is=\"'tree-row-'+task.type\"></component>\n  </g>\n</svg>\n</template>\n<script>\nimport Grid from '../Grid/Grid.vue';\nimport Calendar from '../Calendar/Calendar.vue';\nimport TreeDependencyLines from './DependencyLines.vue';\nimport Task from './Row/Task.vue';\nimport Milestone from './Row/Milestone.vue';\nimport Project from './Row/Project.vue';\n\nexport default {\n  components: {\n    'grid': Grid,\n    'tree-dependency-lines': TreeDependencyLines,\n    'calendar': Calendar,\n    'tree-row-task': Task,\n    'tree-row-milestone': Milestone,\n    'tree-row-project': Project\n  },\n  inject: ['root'],\n  data() {\n    return {};\n  },\n  computed: {\n    getWidth() {\n      const state = this.root.state;\n      return state.width;\n    },\n    getHeight() {\n      const state = this.root.state;\n      return state.height;\n    }\n  }\n}\n</script>\n","<template>\n<div class=\"elastigantt__main\">\n  <main-header></main-header>\n  <div class=\"elastigantt__container\" @mousemove=\"mouseMove\" @mouseup=\"mouseUp\">\n    <div class=\"elastigantt__task-list-container\">\n      <svg ref=\"svgTaskList\" class=\"elastigantt__task-list-svg\" xmlns=\"http://www.w3.org/2000/svg\"\n          :width=\"root.state.taskList.finalWidth+'px'\"\n          :height=\"root.state.height\"\n          v-if=\"root.state.taskList.display\">\n        <defs v-html=\"defs\"></defs>\n        <task-list></task-list>\n      </svg>\n    </div>\n    <div class=\"elastigantt__main-svg-container\">\n      <svg ref=\"svgElement\" class=\"elastigantt__main-container\" xmlns=\"http://www.w3.org/2000/svg\"\n          :width=\"getWidth\"\n          :height=\"root.state.height\">\n        <defs v-html=\"defs\"></defs>\n        <tree></tree>\n      </svg>\n    </div>\n  </div>\n</div>\n</template>\n\n<script>\nimport Header from './Header.vue';\nimport TaskList from './TaskList/TaskList.vue';\nimport Tree from './Tree/Tree.vue';\n\nexport default {\n  components: {\n    'main-header': Header,\n    'task-list': TaskList,\n    'tree': Tree\n  },\n  inject: ['root'],\n  data() {\n    return {\n      defs: ''\n    };\n  },\n  created() {\n    let css = '';\n    try {\n      for (let i = 0, len = document.styleSheets.length; i < len; i++) {\n        let styleSheet = document.styleSheets[i];\n        if (styleSheet.title === 'elastigantt__style') {\n          for (let r = 0, rules = styleSheet.rules.length; r < rules; r++) {\n            let rule = styleSheet.rules[r];\n            css += rule.cssText + \"\\n\";\n          }\n          break;\n        }\n      }\n      // css       = \"<![CDATA[\\n\" + css + \"]]>\";\n      this.defs = `<style type=\"text/css\">${css}</style>`;\n      this.root.state.defs.push(this.defs);\n    } catch (e) {\n      console.log(\"Cannot add stylesheet to SVG. You must run this app from server.\");\n    }\n    // this.root.state.defs.forEach((def) => { this.defs += def; });\n  },\n  mounted() {\n    this.root.svgElement = this.$refs.svgElement;\n  },\n  computed: {\n    getWidth() {\n      return this.root.state.width;\n    },\n    getMainStyle() {\n      const state = this.root.state;\n      return {\n        width: root.state.width + 'px'\n      };\n    }\n  },\n  methods: {\n    mouseMove(event) {\n      this.root.$emit('mousemove', event);\n    },\n    mouseUp(event) {\n      this.root.$emit('mouseup', event);\n    }\n  }\n}\n</script>\n","<template>\n<g></g>\n</template>\n<script>\nexport default {\n  data() {\n    return {};\n  }\n}\n</script>\n","<template>\n<elastigantt-main></elastigantt-main>\n</template>\n\n<script>\nimport Main from './components/Main.vue';\n\nimport Calendar from './components/Calendar/Calendar.vue';\nimport CalendarRow from './components/Calendar/CalendarRow.vue';\nimport Grid from './components/Grid/Grid.vue';\nimport GridHeader from './components/Grid/GridHeader.vue';\nimport Header from './components/Header.vue';\nimport TaskListExpander from './components/TaskList/Expander.vue';\nimport TaskListResizer from './components/TaskList/Resizer.vue';\nimport TaskListHeader from './components/TaskList/TaskListHeader.vue';\nimport TaskListItem from './components/TaskList/TaskListItem.vue';\nimport TaskList from './components/TaskList/TaskList.vue';\nimport TreeDependencyLines from './components/Tree/DependencyLines.vue';\nimport Info from './components/Tree/Info.vue';\nimport TreeProgressBar from './components/Tree/ProgressBar.vue';\nimport TreeRowMilestone from './components/Tree/Row/Milestone.vue';\nimport TreeRowProject from './components/Tree/Row/Project.vue';\nimport TreeRowTask from './components/Tree/Row/Task.vue';\nimport TreeText from './components/Tree/Text.vue';\nimport Tree from './components/Tree/Tree.vue';\n\nfunction getOptions(userOptions) {\n  return {\n    debug: false,\n    width: 0,\n    height: 0,\n    svgElement: null,\n    scope: {\n      before: 1,\n      after: 1\n    },\n    times: {\n      timeScale: 60 * 1000,\n      timeZoom: 17,\n      timePerPixel: 0,\n      fistDate: null,\n      firstTime: null, // firstDate getTime()\n      lastDate: null,\n      lastTime: null, // last date getTime()\n      totalViewDurationMs: 0,\n      totalViewDurationPx: 0,\n      stepMs: 24 * 60 * 60 * 1000,\n      stepPx: 0,\n      steps: 0\n    },\n    row: {\n      height: 24,\n      styles: {\n        bar: {\n          'fill': '#ff0000a0',\n          'stroke': '#ff0000',\n          'stroke-width': '1'\n        },\n        text: {\n          'fill': '#ffffff',\n          'font-family': 'sans-serif',\n          'font-size': '12px'\n        }\n      },\n      showText: true\n    },\n    treeText: {\n      offset: 0,\n      styles: {\n        text: {\n          'font-family': 'sans-serif',\n          'font-size': '12px',\n          'font-weight': 'normal',\n          'fill': '#000000a0'\n        },\n        background: {\n          fill: '#ffffffb0'\n        }\n      },\n      xPadding: 10\n    },\n    dependencyLines: {\n      style: {\n        'fill': 'transparent',\n        'stroke': '#FFa00090',\n        'stroke-width': 2\n      }\n    },\n    progress: {\n      width: 20,\n      height: 6,\n      styles: {\n        line: {\n          'stroke': '#ffffff85',\n          'stroke-width': 20\n        },\n        bar: {\n          'fill': \"url(#diagonalHatch)\",\n          'transform': 'translateY(0.1) scaleY(0.8)'\n        }\n      }\n    },\n    horizontalGrid: {\n      gap: 6,\n      strokeWidth: 1,\n      style: 'stroke:#00000010;strokeWidth:1',\n      lines: []\n    },\n    verticalGrid: {\n      strokeWidth: 1,\n      style: 'stroke:#00000010;strokeWidth:1',\n      lines: []\n    },\n    info: {\n      style: 'fill:#000000a0',\n      textStyle: 'fill:#fff',\n      fontFamily: 'sans-serif',\n      fontSize: '12px',\n      fontWeight: 'bold',\n      display: false\n    },\n    taskList: {\n      display: true,\n      styles: {\n        row: {\n          'background': 'transparent',\n          'border-color': '#00000010'\n        },\n        column: {\n          'border-color': '#00000010'\n        },\n        header: {\n          'background': 'linear-gradient(to bottom,#fff,#f5f5f5)',\n          'border-color': '#00000010'\n        },\n        label: {\n          'display': 'inline-block',\n          'margin': 'auto 6px',\n          'color': '#404040'\n        },\n        value: {\n          'margin': 'auto 6px',\n          'overflow': 'hidden',\n          'text-overflow': 'ellipsis',\n          'line-height': '1.5em',\n          'word-break': 'keep-all',\n          'font-family': 'sans-serif',\n          'font-size': '12px',\n          'white-space': 'nowrap',\n          'color': '#606060'\n        },\n        expander: {\n          stroke: '#909090',\n          strokeWidth: 1,\n          'fill': '#ffffffa0'\n        }\n      },\n      columns: [{\n        label: 'ID',\n        value: 'id',\n        width: 40,\n        styles: {\n          label: {}\n        }\n      }],\n      resizerWidth: 0,\n      percent: 100,\n      width: 0,\n      finalWidth: 0,\n      expander: {\n        size: 16,\n        columnWidth: 24\n      }\n    },\n    calendar: {\n      hours: [],\n      days: [],\n      months: [],\n      gap: 6,\n      height: 0,\n      styles: {\n        wrapper: {\n          'width': '100%',\n          'height': '100%',\n          'background': 'linear-gradient(to bottom,#fff,#f5f5f5)',\n          'border-color': '#00000010'\n        },\n        row: {\n          fill: 'transparent',\n          stroke: '#00000010'\n        },\n        column: {\n          'stroke': '#00000010',\n          'stroke-width': 1,\n          'fill': 'transparent'\n        },\n        text: {\n          fontFamily: 'sans-serif',\n          'fill': '#404040'\n        }\n      },\n      hour: {\n        height: 20,\n        display: true,\n        fontSize: '12px',\n        format: {\n          short(date) {\n            return dayjs(date).locale(userOptions.locale.code).format('HH');\n          },\n          medium(date) {\n            return dayjs(date).locale(userOptions.locale.code).format('HH:mm');\n          },\n          long(date) {\n            return dayjs(date).locale(userOptions.locale.code).format('HH:mm');\n          }\n        }\n      },\n      day: {\n        height: 20,\n        display: true,\n        fontSize: '12px',\n        format: {\n          short(date) {\n            return dayjs(date).locale(userOptions.locale.code).format('DD');\n          },\n          medium(date) {\n            return dayjs(date).locale(userOptions.locale.code).format('DD ddd');\n          },\n          long(date) {\n            return dayjs(date).locale(userOptions.locale.code).format('DD dddd');\n          }\n        }\n      },\n      month: {\n        height: 20,\n        display: true,\n        fontSize: '12px',\n        format: {\n          short(date) {\n            return dayjs(date).locale(userOptions.locale.code).format('MM');\n          },\n          medium(date) {\n            return dayjs(date).locale(userOptions.locale.code).format('\\'YY MMM');\n          },\n          long(date) {\n            return dayjs(date).locale(userOptions.locale.code).format('YYYY MMMM (MM)');\n          }\n        }\n      }\n    },\n    defs: []\n  };\n}\n\nexport default {\n  props: [\n    'tasks', 'options'\n  ],\n  provide() {\n    const provider = {};\n    Object.defineProperty(provider, 'root', {\n      enumerable: true,\n      get: () => this\n    });\n    return provider;\n  },\n  data() {\n    return {\n      state: {}\n    };\n  },\n  methods: {\n    isObject(item) {\n      return item && typeof item === 'object' && !Array.isArray(item);\n    },\n    mergeDeep(target, ...sources) {\n      if (!sources.length) {\n        return target;\n      }\n      const source = sources.shift();\n      if (this.isObject(target) && this.isObject(source)) {\n        for (const key in source) {\n          if (this.isObject(source[key])) {\n            if (!target[key])\n              Object.assign(target, {\n                [key]: {}\n              });\n            this.mergeDeep(target[key], source[key]);\n          } else {\n            Object.assign(target, {\n              [key]: source[key]\n            });\n          }\n        }\n      }\n      return this.mergeDeep(target, ...sources);\n    },\n    resetTaskTree() {\n      this.state.rootTask.children = [];\n      this.state.rootTask.allChildren = [];\n      this.state.rootTask.parent = null;\n      this.state.rootTask.parents = [];\n      for (let i = 0, len = this.state.tasks.length; i < len; i++) {\n        let current = this.tasks[i];\n        current.children = [];\n        current.allChildren = [];\n        current.parent = null;\n        current.parents = [];\n      }\n    },\n    makeTaskTree(task) {\n      for (let i = 0, len = this.state.tasks.length; i < len; i++) {\n        let current = this.tasks[i];\n        if (current.parentId === task.id) {\n          if (task.parents.length) {\n            task.parents.forEach(parent => current.parents.push(parent));\n          }\n          if (task !== this.root) {\n            current.parents.push(task);\n            current.parent = task;\n          } else {\n            current.parents = [];\n            current.parent = null;\n          }\n          current = this.makeTaskTree(current);\n          task.allChildren.push(current);\n          task.children.push(current);\n          current.allChildren.forEach(child => task.allChildren.push(child));\n        }\n      }\n      return task;\n    },\n\n    getTask(taskId) {\n      return this.tasksById[taskId];\n    },\n    getChildren(taskId) {\n      return this.state.tasks.filter(task => task.parent === taskId);\n    },\n    getVisibleTasks() {\n      return this.state.tasks.filter(task => task.visible);\n    },\n\n    calculateCalendarDimensions() {\n      this.state.calendar.height = 0;\n      if (this.state.calendar.hour.display) {\n        this.state.calendar.height += this.state.calendar.hour.height;\n      }\n      if (this.state.calendar.day.display) {\n        this.state.calendar.height += this.state.calendar.day.height;\n      }\n      if (this.state.calendar.month.display) {\n        this.state.calendar.height += this.state.calendar.month.height;\n      }\n    },\n    calculateTaskListColumnWidths() {\n      let final = 0;\n      this.state.taskList.columns.forEach(column => {\n        column.finalWidth = (column.width / 100) * this.state.taskList.percent;\n        final += column.finalWidth;\n      });\n      this.state.taskList.finalWidth = final + this.state.taskList.expander.columnWidth;\n    },\n    recalculate() {\n      const firstDate = this.state.times.firstTaskDate.toISOString().split('T')[0] + 'T00:00:00';\n      const lastDate = this.state.times.lastTaskDate.toISOString().split('T')[0] + 'T23:59:59.999';\n      this.state.times.firstDate = dayjs(firstDate).locale(this.locale).subtract(this.state.scope.before, 'days').toDate();\n      this.state.times.lastDate = dayjs(lastDate).locale(this.locale).add(this.state.scope.after, 'days').toDate();\n      this.state.times.firstTime = this.state.times.firstDate.getTime();\n      this.state.times.lastTime = this.state.times.lastDate.getTime();\n      this.state.times.totalViewDurationMs = this.state.times.lastTime - this.state.times.firstTime;\n      this.state.taskList.width = this.state.taskList.columns.reduce((prev, current) => {\n        return {\n          width: prev.width + current.width\n        };\n      }, {\n        width: 0\n      }).width;\n      let max = this.state.times.timeScale * 60;\n      let min = this.state.times.timeScale;\n      let steps = max / min;\n      let percent = this.state.times.timeZoom / 100;\n      this.state.times.timePerPixel = this.state.times.timeScale * steps * percent + Math.pow(2, this.state.times.timeZoom);\n      this.state.times.totalViewDurationPx = this.state.times.totalViewDurationMs / this.state.times.timePerPixel;\n      this.state.times.stepPx = this.state.times.stepMs / this.state.times.timePerPixel;\n      this.state.width = this.state.times.totalViewDurationPx + this.state.verticalGrid.strokeWidth;\n      this.state.times.steps = Math.ceil(this.state.times.totalViewDurationPx / this.state.times.stepPx);\n\n      this.calculateCalendarDimensions();\n      this.calculateTaskListColumnWidths();\n      this.resetTaskTree();\n      this.state.tasks = this.makeTaskTree(this.state.rootTask).allChildren;\n      const visibleTasks = this.getVisibleTasks();\n      this.state.height = visibleTasks.length * (this.state.row.height + this.state.horizontalGrid.gap * 2) + this.state.horizontalGrid.gap + this.state.calendar.height + this.state.calendar.styles.column['stroke-width'] + this.state.calendar.gap;\n      for (let index = 0, len = visibleTasks.length; index < len; index++) {\n        let task = visibleTasks[index];\n        task.width = task.durationMs / this.state.times.timePerPixel - this.state.verticalGrid.strokeWidth;\n        if (task.width < 0) {\n          task.width = 0;\n        }\n        task.height = this.state.row.height;\n        let x = task.startTime - this.state.times.firstTime;\n        if (x) {\n          x = x / this.state.times.timePerPixel;\n        }\n        task.x = x + this.state.verticalGrid.strokeWidth;\n        task.y = (this.state.row.height + this.state.horizontalGrid.gap * 2) * index + this.state.horizontalGrid.gap + this.state.calendar.height + this.state.calendar.styles.column['stroke-width'] + this.state.calendar.gap;\n      }\n    },\n    getSVG() {\n      return this.svgElement.outerHTML;\n    },\n    getImage(type = 'image/png') {\n      return new Promise((resolve, reject) => {\n        const img = new Image();\n        img.onload = () => {\n          const canvas = document.createElement('canvas');\n          canvas.width = this.svgElement.clientWidth;\n          canvas.height = this.svgElement.clientHeight;\n          canvas.getContext('2d').drawImage(img, 0, 0);\n          resolve(canvas.toDataURL(type));\n        };\n        img.src = 'data:image/svg+xml,' + encodeURIComponent(this.getSVG());\n      });\n    },\n    initialize() {\n      this.state = this.mergeDeep(getOptions(this.options), this.options, {\n        tasks: this.tasks\n      });\n      dayjs.locale(options.locale, null, true);\n      this.state.taskList.columns = this.state.taskList.columns.map(column => {\n        column.finalWidth = (column.width / 100) * this.state.taskList.percent;\n        if (typeof column.styles === 'undefined') {\n          column.styles = {};\n        }\n        column.styles = this.mergeDeep({}, this.state.taskList.styles, column.styles);\n        return column;\n      });\n      // initialize observer\n      this.state.tasks = this.state.tasks.map(task => {\n        task.x = 0;\n        task.y = 0;\n        task.width = 0;\n        task.height = 0;\n        task.tooltip = {\n          visible: false\n        };\n        task.mouseOver = false;\n        task.dependencyLines = [];\n        if (typeof task.visible === 'undefined') {\n          task.visible = true;\n        }\n        if (typeof task.collapsed === 'undefined') {\n          task.collapsed = false;\n        }\n        if (typeof task.dependencyLines === 'undefined') {\n          task.dependencyLines = [];\n        }\n        if (typeof task.parentId === 'undefined') {\n          task.parentId = null;\n        }\n        task.children = [];\n        task.allChildren = [];\n        task.parents = [];\n        task.parent = null;\n        return task;\n      });\n      this.state.rootTask = {\n        id: null,\n        label: 'root',\n        children: [],\n        allChildren: [],\n        parents: [],\n        parent: null\n      };\n      this.state.taskTree = this.makeTaskTree(this.state.rootTask);\n      this.state.ctx = document.createElement('canvas').getContext('2d');\n    },\n  },\n\n  created() {\n    this.initialize();\n    this.tasksById = {};\n    this.state.tasks.forEach(task => (this.tasksById[task.id] = task));\n    let tasks = this.tasks;\n    let firstTaskTime = Number.MAX_SAFE_INTEGER;\n    let lastTaskTime = 0;\n    let firstTaskDate,\n      lastTaskDate;\n    for (let index = 0, len = this.state.tasks.length; index < len; index++) {\n      let task = this.tasks[index];\n      task.startDate = new Date(task.start);\n      task.startTime = task.startDate.getTime();\n      task.durationMs = task.duration * 1000;\n      if (task.startTime < firstTaskTime) {\n        firstTaskTime = task.startTime;\n        firstTaskDate = task.startDate;\n      }\n      if (task.startTime + task.durationMs > lastTaskTime) {\n        lastTaskTime = task.startTime + task.durationMs;\n        lastTaskDate = new Date(task.startTime + task.durationMs);\n      }\n    }\n    this.state.times.firstTaskTime = firstTaskTime;\n    this.state.times.lastTaskTime = lastTaskTime;\n    this.state.times.firstTaskDate = firstTaskDate;\n    this.state.times.lastTaskDate = lastTaskDate;\n    this.recalculate();\n  },\n\n  components: {\n    'task-list-resizer': TaskListResizer,\n    'task-list-expander': TaskListExpander,\n    'task-list-header': TaskListHeader,\n    'task-list-item': TaskListItem,\n    'task-list': TaskList,\n    'elastigantt-main': Main,\n    'tree': Tree,\n    'main-header': Header,\n    'grid': Grid,\n    'grid-header': GridHeader,\n    'tree-row-task': TreeRowTask,\n    'tree-row-milestone': TreeRowMilestone,\n    'tree-row-project': TreeRowProject,\n    'tree-text': TreeText,\n    'tree-dependency-lines': TreeDependencyLines,\n    'tree-progress-bar': TreeProgressBar,\n    'info': Info,\n    'calendar': Calendar,\n    'calendar-row': CalendarRow\n  }\n}\n</script>\n","import Elastigantt from './Elastigantt.vue';\nVue.component('elastigantt', Elastigantt);\nexport default Elastigantt;\n"],"names":[],"mappings":";;;;;;;;;;;;;AAUA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;;EAnDA,YAAY;EACZ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;;EAdA,YAAY;EACZ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC4BA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;;EAxFA,YAAY;EACZ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACWA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;;EA/DA,YAAY;EACZ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACSA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;;EArCA,YAAY;EACZ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACWA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;;EAzCA,YAAY;EACZ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACGA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;;EA/CA,YAAY;EACZ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACQA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;;EAvBA,YAAY;EACZ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACQA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,SACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;;EArPA,YAAY;EACZ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACKA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;;;;;;;;EAQA;EACA;EACA;;;;;EAKA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;;EAvEA,YAAY;EACZ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACGA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;;EAlBA,YAAY;EACZ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACQA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;;;EA/BA,YAAY;EACZ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACSA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;;EA/BA,YAAY;EACZ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACuBA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACA,EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;;EA/DA,YAAY;EACZ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACoBA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;;;;;EAMA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;;EA9DA,YAAY;EACZ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACkBA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;;;;;;;;;;;EAYA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;;EA7EA,YAAY;EACZ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACsBA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;;EA9CA,YAAY;EACZ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC0BA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;;EAlFA,YAAY;EACZ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;EACA;EACA;EACA;EACA;;;EALA,YAAY;EACZ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ECsBA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;AAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;;EAhhBA,YAAY;EACZ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ECHA,GAAG,CAAC,SAAS,CAAC,aAAa,EAAE,WAAW,CAAC,CAAC;;;;;;;;"}